kind: job
metadata:
  name: batch-inference-v2
  tag: ''
  hash: 86275f3c9b0cc0375f294ddc8098724f52fcecfe
  project: ''
  labels:
    author: eyald
  categories:
  - utils
  - data-analysis
  - monitoring
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#73f4bf01fc9fd36ddfe5e1e63e6070f71fd51792:/Users/Eyal_Danieli/PycharmProjects/functions/batch_inference_v2/batch_inference_v2.py
    origin_filename: /Users/Eyal_Danieli/PycharmProjects/functions/batch_inference_v2/batch_inference_v2.py
    with_mlrun: false
    auto_build: false
    requirements: []
  entry_points:
    infer:
      name: infer
      doc: 'Perform a prediction on a given dataset with the given model. Please make
        sure that you already logged the model

        under the current project.

        Can perform drift analysis between the sample set statistics stored in the
        model to the current input data. The

        drift rule is the value per-feature mean of the TVD and Hellinger scores according
        to the thresholds configures

        here. When performing drift analysis, this function either uses an existing
        model endpoint record or creates

        a new one.

        At the moment, this function is supported for `mlrun>=1.5.0` versions.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: dataset
        type: Union[DataItem, list, dict, DataFrame, Series, ndarray]
        doc: The dataset to infer through the model. Provided as an input (DataItem)
          that represents Dataset artifact / Feature vector URI. If using MLRun SDK,
          `dataset` can also be provided as a list, dictionary or numpy array.
        default: ''
      - name: model_path
        type: Union[str, DataItem]
        doc: Model store uri (should start with store://). Provided as an input (DataItem).
          If using MLRun SDK, `model_path` also can be provided as a parameter (string).
          To generate a valid model store URI, please log the model before running
          this function. If `endpoint_id` of existing model endpoint is provided,
          make sure that it has a similar model store path, otherwise the drift analysis
          won't be triggered.
        default: ''
      - name: drop_columns
        type: Union[str, List[str], int, List[int]]
        doc: A string / integer or a list of strings / integers that represent the
          column names / indices to drop. When the dataset is a list or a numpy array
          this parameter must be represented by integers.
        default: null
      - name: label_columns
        type: Union[str, List[str]]
        doc: The target label(s) of the column(s) in the dataset for Regression or
          Classification tasks. The label column can be accessed from the model object,
          or the feature vector provided if available.
        default: null
      - name: feature_columns
        type: Union[str, List[str]]
        doc: List of feature columns that will be used to build the dataframe when
          dataset is from type list or numpy array.
        default: null
      - name: log_result_set
        type: bool
        doc: Whether to log the result set - a DataFrame of the given inputs concatenated
          with the predictions. Defaulted to True.
        default: true
      - name: result_set_name
        type: str
        doc: The db key to set name of the prediction result and the filename. Defaulted
          to 'prediction'.
        default: prediction
      - name: batch_id
        type: str
        doc: The ID of the given batch (inference dataset). If `None`, it will be
          generated. Will be logged as a result of the run.
        default: null
      - name: artifacts_tag
        type: str
        doc: Tag to use for all the artifacts resulted from the function (result set
          and model monitoring artifacts)
        default: ''
      - name: perform_drift_analysis
        type: bool
        doc: Whether to perform drift analysis between the sample set of the model
          object to the dataset given. By default, None, which means it will perform
          drift analysis if the model already has feature stats that are considered
          as a reference sample set. Performing drift analysis on a new endpoint id
          will generate a new model endpoint record. Please note that in order to
          trigger the drift analysis job, you need to set `trigger_monitoring_job=True`.
          Otherwise, the drift analysis will be triggered only as part the scheduled
          monitoring job (if exist in the current project) or if triggered manually
          by the user.
        default: null
      - name: trigger_monitoring_job
        type: bool
        doc: Whether to trigger the batch drift analysis after the infer job.
        default: false
      - name: batch_image_job
        type: str
        doc: The image that will be used to register the monitoring batch job if not
          exist. By default, the image is mlrun/mlrun.
        default: mlrun/mlrun
      - name: endpoint_id
        type: str
        doc: Model endpoint unique ID. If `perform_drift_analysis` was set, the endpoint_id
          will be used either to perform the analysis on existing model endpoint or
          to generate a new model endpoint record.
        default: ''
      - name: model_endpoint_name
        type: str
        doc: If a new model endpoint is generated, the model name will be presented
          under this endpoint.
        default: batch-infer
      - name: model_endpoint_drift_threshold
        type: float
        doc: The threshold of which to mark drifts. Defaulted to 0.7.
        default: 0.7
      - name: model_endpoint_possible_drift_threshold
        type: float
        doc: The threshold of which to mark possible drifts. Defaulted to 0.5.
        default: 0.5
      - name: model_endpoint_sample_set
        type: Union[DataItem, list, dict, DataFrame, Series, ndarray]
        doc: A sample dataset to give to compare the inputs in the drift analysis.
          Can be provided as an input (DataItem) or as a parameter (e.g. string, list,
          DataFrame). The default chosen sample set will always be the one who is
          set in the model artifact itself.
        default: null
      outputs:
      - default: ''
      lineno: 82
  description: Batch inference (also knows as prediction) for the common ML frameworks
    (SciKit-Learn, XGBoost and LightGBM) while performing data drift analysis.
  default_handler: infer
  disable_auto_mount: false
  allow_empty_resources: true
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
