kind: job
metadata:
  name: hugging-face-classifier-trainer
  tag: ''
  hash: d828ece3ea3a7d3ed3453c92f8e47d767266edb0
  project: ''
  labels:
    author: davids
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  build:
    functionSourceCode: aW1wb3J0IG9zCmltcG9ydCBzaHV0aWwKaW1wb3J0IHRlbXBmaWxlCmltcG9ydCB6aXBmaWxlCmZyb20gYWJjIGltcG9ydCBBQkMKZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgQ2FsbGFibGUsIERpY3QsIExpc3QsIE9wdGlvbmFsLCBUdXBsZSwgVW5pb24KCmltcG9ydCBtbHJ1bgppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgdHJhbnNmb3JtZXJzCmZyb20gZGF0YXNldHMgaW1wb3J0IERhdGFzZXQsIGxvYWRfZGF0YXNldCwgbG9hZF9tZXRyaWMKZnJvbSBtbHJ1biBpbXBvcnQgTUxDbGllbnRDdHgKZnJvbSBtbHJ1biBpbXBvcnQgZmVhdHVyZV9zdG9yZSBhcyBmcwpmcm9tIG1scnVuLmFwaS5zY2hlbWFzIGltcG9ydCBPYmplY3RLaW5kCmZyb20gbWxydW4uYXJ0aWZhY3RzIGltcG9ydCBBcnRpZmFjdCwgUGxvdGx5QXJ0aWZhY3QKZnJvbSBtbHJ1bi5kYXRhc3RvcmUgaW1wb3J0IERhdGFJdGVtCmZyb20gbWxydW4uZnJhbWV3b3Jrcy5fY29tbW9uIGltcG9ydCBDb21tb25UeXBlcywgTUxSdW5JbnRlcmZhY2UKZnJvbSBtbHJ1bi51dGlscyBpbXBvcnQgY3JlYXRlX2NsYXNzCmZyb20gcGxvdGx5IGltcG9ydCBncmFwaF9vYmplY3RzIGFzIGdvCmZyb20gc2tsZWFybi5tb2RlbF9zZWxlY3Rpb24gaW1wb3J0IHRyYWluX3Rlc3Rfc3BsaXQKZnJvbSB0cmFuc2Zvcm1lcnMgaW1wb3J0IChBdXRvVG9rZW5pemVyLCBEYXRhQ29sbGF0b3JXaXRoUGFkZGluZywKICAgICAgICAgICAgICAgICAgICAgICAgICBFdmFsUHJlZGljdGlvbiwgUHJlVHJhaW5lZE1vZGVsLCBQcmVUcmFpbmVkVG9rZW5pemVyLAogICAgICAgICAgICAgICAgICAgICAgICAgIFRyYWluZXIsIFRyYWluZXJDYWxsYmFjaywgVHJhaW5lckNvbnRyb2wsCiAgICAgICAgICAgICAgICAgICAgICAgICAgVHJhaW5lclN0YXRlLCBUcmFpbmluZ0FyZ3VtZW50cykKCgojIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1mcm9tIE1MUlVOLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KY2xhc3MgSEZPUlRPcHRpbWl6ZXJNTFJ1bkludGVyZmFjZShNTFJ1bkludGVyZmFjZSwgQUJDKToKICAgICIiIgogICAgSW50ZXJmYWNlIGZvciBhZGRpbmcgTUxSdW4gZmVhdHVyZXMgZm9yIHRlbnNvcmZsb3cga2VyYXMgQVBJLgogICAgIiIiCgogICAgIyBNTFJ1bidzIGNvbnRleHQgZGVmYXVsdCBuYW1lOgogICAgREVGQVVMVF9DT05URVhUX05BTUUgPSAibWxydW4taHVnZ2luZ2ZhY2UiCgogICAgIyBBdHRyaWJ1dGVzIHRvIGJlIGluc2VydGVkIHNvIHRoZSBNTFJ1biBpbnRlcmZhY2Ugd2lsbCBiZSBmdWxseSBlbmFibGVkLgogICAgX1BST1BFUlRJRVMgPSB7CiAgICAgICAgIl9hdXRvX2xvZyI6IEZhbHNlLAogICAgICAgICJfY29udGV4dCI6IE5vbmUsCiAgICAgICAgIl9tb2RlbF9uYW1lIjogIm1vZGVsIiwKICAgICAgICAiX3RhZyI6ICIiLAogICAgICAgICJfbGFiZWxzIjogTm9uZSwKICAgICAgICAiX2V4dHJhX2RhdGEiOiBOb25lLAogICAgfQogICAgX01FVEhPRFMgPSBbImVuYWJsZV9hdXRvX2xvZ2dpbmciXQogICAgIyBBdHRyaWJ1dGVzIHRvIHJlcGxhY2Ugc28gdGhlIE1MUnVuIGludGVyZmFjZSB3aWxsIGJlIGZ1bGx5IGVuYWJsZWQuCiAgICBfUkVQTEFDRURfTUVUSE9EUyA9IFsKICAgICAgICAib3B0aW1pemUiLAogICAgXQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIGFkZF9pbnRlcmZhY2UoCiAgICAgICAgY2xzLAogICAgICAgIG9iaiwKICAgICAgICByZXN0b3JhdGlvbjogQ29tbW9uVHlwZXMuTUxSdW5JbnRlcmZhY2VSZXN0b3JhdGlvblR5cGUgPSBOb25lLAogICAgKToKICAgICAgICAiIiIKICAgICAgICBFbnJpY2ggdGhlIG9iamVjdCB3aXRoIHRoaXMgaW50ZXJmYWNlIHByb3BlcnRpZXMsIG1ldGhvZHMgYW5kIGZ1bmN0aW9ucywgc28gaXQgd2lsbCBoYXZlIHRoaXMgVGVuc29yRmxvdy5LZXJhcwogICAgICAgIE1MUnVuJ3MgZmVhdHVyZXMuCiAgICAgICAgOnBhcmFtIG9iajogICAgICAgICAgICAgICAgICAgICBUaGUgb2JqZWN0IHRvIGVucmljaCBoaXMgaW50ZXJmYWNlLgogICAgICAgIDpwYXJhbSByZXN0b3JhdGlvbjogUmVzdG9yYXRpb24gaW5mb3JtYXRpb24gdHVwbGUgYXMgcmV0dXJuZWQgZnJvbSAncmVtb3ZlX2ludGVyZmFjZScgaW4gb3JkZXIgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZCB0aGUgaW50ZXJmYWNlIGluIGEgY2VydGFpbiBzdGF0ZS4KICAgICAgICAiIiIKICAgICAgICBzdXBlcihIRk9SVE9wdGltaXplck1MUnVuSW50ZXJmYWNlLCBjbHMpLmFkZF9pbnRlcmZhY2UoCiAgICAgICAgICAgIG9iaj1vYmosIHJlc3RvcmF0aW9uPXJlc3RvcmF0aW9uCiAgICAgICAgKQoKICAgIEBjbGFzc21ldGhvZAogICAgZGVmIG1scnVuX29wdGltaXplKGNscyk6CiAgICAgICAgIiIiCiAgICAgICAgTUxSdW4ncyB0Zi5rZXJhcy5Nb2RlbC5maXQgd3JhcHBlci4gSXQgd2lsbCBzZXR1cCB0aGUgb3B0aW1pemVyIHdoZW4gdXNpbmcgaG9yb3ZvZC4gVGhlIG9wdGltaXplciBtdXN0IGJlCiAgICAgICAgcGFzc2VkIGluIGEga2V5d29yZCBhcmd1bWVudCBhbmQgd2hlbiB1c2luZyBob3Jvdm9kLCBpdCBtdXN0IGJlIHBhc3NlZCBhcyBhbiBPcHRpbWl6ZXIgaW5zdGFuY2UsIG5vdCBhIHN0cmluZy4KCiAgICAgICAgcmFpc2UgTUxSdW5JbnZhbGlkQXJndW1lbnRFcnJvcjogSW4gY2FzZSB0aGUgb3B0aW1pemVyIHByb3ZpZGVkIGRpZCBub3QgZm9sbG93IHRoZSBpbnN0cnVjdGlvbnMgYWJvdmUuCiAgICAgICAgIiIiCgogICAgICAgIGRlZiB3cmFwcGVyKHNlbGYsICphcmdzLCAqKmt3YXJncyk6CiAgICAgICAgICAgIHNhdmVfZGlyID0gY2xzLl9nZXRfZnVuY3Rpb25fYXJndW1lbnQoCiAgICAgICAgICAgICAgICBzZWxmLm9wdGltaXplLAogICAgICAgICAgICAgICAgYXJndW1lbnRfbmFtZT0ic2F2ZV9kaXIiLAogICAgICAgICAgICAgICAgcGFzc2VkX2FyZ3M9YXJncywKICAgICAgICAgICAgICAgIHBhc3NlZF9rd2FyZ3M9a3dhcmdzLAogICAgICAgICAgICApWzBdCgogICAgICAgICAgICAjIENhbGwgdGhlIG9yaWdpbmFsIG9wdGltaXplIG1ldGhvZDoKICAgICAgICAgICAgcmVzdWx0ID0gc2VsZi5vcmlnaW5hbF9vcHRpbWl6ZSgqYXJncywgKiprd2FyZ3MpCgogICAgICAgICAgICBpZiBzZWxmLl9hdXRvX2xvZzoKICAgICAgICAgICAgICAgICMgTG9nIHRoZSBvbm54IG1vZGVsOgogICAgICAgICAgICAgICAgc2VsZi5fY29udGV4dC5sb2dfbW9kZWwoCiAgICAgICAgICAgICAgICAgICAga2V5PSJtb2RlbCIsCiAgICAgICAgICAgICAgICAgICAgZGJfa2V5PXNlbGYuX21vZGVsX25hbWUsCiAgICAgICAgICAgICAgICAgICAgbW9kZWxfZmlsZT1mIntzYXZlX2Rpcn0vbW9kZWxfb3B0aW1pemVkLm9ubngiLAogICAgICAgICAgICAgICAgICAgIHRhZz1zZWxmLl90YWcsCiAgICAgICAgICAgICAgICAgICAgZnJhbWV3b3JrPSJPTk5YIiwKICAgICAgICAgICAgICAgICAgICBsYWJlbHM9c2VsZi5fbGFiZWxzLAogICAgICAgICAgICAgICAgICAgIGV4dHJhX2RhdGE9c2VsZi5fZXh0cmFfZGF0YSwKICAgICAgICAgICAgICAgICkKCiAgICAgICAgICAgIHJldHVybiByZXN1bHQKCiAgICAgICAgcmV0dXJuIHdyYXBwZXIKCiAgICBkZWYgZW5hYmxlX2F1dG9fbG9nZ2luZygKICAgICAgICBzZWxmLAogICAgICAgIGNvbnRleHQ6IG1scnVuLk1MQ2xpZW50Q3R4LAogICAgICAgIG1vZGVsX25hbWU6IHN0ciA9ICJtb2RlbCIsCiAgICAgICAgdGFnOiBzdHIgPSAiIiwKICAgICAgICBsYWJlbHM6IERpY3Rbc3RyLCBzdHJdID0gTm9uZSwKICAgICAgICBleHRyYV9kYXRhOiBkaWN0ID0gTm9uZSwKICAgICk6CiAgICAgICAgc2VsZi5fYXV0b19sb2cgPSBUcnVlCgogICAgICAgIHNlbGYuX2NvbnRleHQgPSBjb250ZXh0CiAgICAgICAgc2VsZi5fbW9kZWxfbmFtZSA9IG1vZGVsX25hbWUKICAgICAgICBzZWxmLl90YWcgPSB0YWcKICAgICAgICBzZWxmLl9sYWJlbHMgPSBsYWJlbHMKICAgICAgICBzZWxmLl9leHRyYV9kYXRhID0gZXh0cmFfZGF0YQoKCmNsYXNzIEhGVHJhaW5lck1MUnVuSW50ZXJmYWNlKE1MUnVuSW50ZXJmYWNlLCBBQkMpOgogICAgIiIiCiAgICBJbnRlcmZhY2UgZm9yIGFkZGluZyBNTFJ1biBmZWF0dXJlcyBmb3IgdGVuc29yZmxvdyBrZXJhcyBBUEkuCiAgICAiIiIKCiAgICAjIE1MUnVucyBjb250ZXh0IGRlZmF1bHQgbmFtZToKICAgIERFRkFVTFRfQ09OVEVYVF9OQU1FID0gIm1scnVuLWh1Z2dpbmdmYWNlIgoKICAgICMgQXR0cmlidXRlcyB0byByZXBsYWNlIHNvIHRoZSBNTFJ1biBpbnRlcmZhY2Ugd2lsbCBiZSBmdWxseSBlbmFibGVkLgogICAgX1JFUExBQ0VEX01FVEhPRFMgPSBbCiAgICAgICAgInRyYWluIiwKICAgICAgICAjICJldmFsdWF0ZSIKICAgIF0KCiAgICBAY2xhc3NtZXRob2QKICAgIGRlZiBhZGRfaW50ZXJmYWNlKAogICAgICAgIGNscywKICAgICAgICBvYmo6IFRyYWluZXIsCiAgICAgICAgcmVzdG9yYXRpb246IENvbW1vblR5cGVzLk1MUnVuSW50ZXJmYWNlUmVzdG9yYXRpb25UeXBlID0gTm9uZSwKICAgICk6CiAgICAgICAgIiIiCiAgICAgICAgRW5yaWNoIHRoZSBvYmplY3Qgd2l0aCB0aGlzIGludGVyZmFjZSBwcm9wZXJ0aWVzLCBtZXRob2RzIGFuZCBmdW5jdGlvbnMsIHNvIGl0IHdpbGwgaGF2ZSB0aGlzIFRlbnNvckZsb3cuS2VyYXMKICAgICAgICBNTFJ1bnMgZmVhdHVyZXMuCiAgICAgICAgOnBhcmFtIG9iajogICAgICAgICAgICAgICAgICAgICBUaGUgb2JqZWN0IHRvIGVucmljaCBoaXMgaW50ZXJmYWNlLgogICAgICAgIDpwYXJhbSByZXN0b3JhdGlvbjogUmVzdG9yYXRpb24gaW5mb3JtYXRpb24gdHVwbGUgYXMgcmV0dXJuZWQgZnJvbSAncmVtb3ZlX2ludGVyZmFjZScgaW4gb3JkZXIgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZCB0aGUgaW50ZXJmYWNlIGluIGEgY2VydGFpbiBzdGF0ZS4KICAgICAgICAiIiIKCiAgICAgICAgc3VwZXIoSEZUcmFpbmVyTUxSdW5JbnRlcmZhY2UsIGNscykuYWRkX2ludGVyZmFjZSgKICAgICAgICAgICAgb2JqPW9iaiwgcmVzdG9yYXRpb249cmVzdG9yYXRpb24KICAgICAgICApCgogICAgQGNsYXNzbWV0aG9kCiAgICBkZWYgbWxydW5fdHJhaW4oY2xzKToKCiAgICAgICAgIiIiCiAgICAgICAgTUxSdW5zIHRmLmtlcmFzLk1vZGVsLmZpdCB3cmFwcGVyLiBJdCB3aWxsIHNldHVwIHRoZSBvcHRpbWl6ZXIgd2hlbiB1c2luZyBob3Jvdm9kLiBUaGUgb3B0aW1pemVyIG11c3QgYmUKICAgICAgICBwYXNzZWQgaW4gYSBrZXl3b3JkIGFyZ3VtZW50IGFuZCB3aGVuIHVzaW5nIGhvcm92b2QsIGl0IG11c3QgYmUgcGFzc2VkIGFzIGFuIE9wdGltaXplciBpbnN0YW5jZSwgbm90IGEgc3RyaW5nLgoKICAgICAgICByYWlzZSBNTFJ1bkludmFsaWRBcmd1bWVudEVycm9yOiBJbiBjYXNlIHRoZSBvcHRpbWl6ZXIgcHJvdmlkZWQgZGlkIG5vdCBmb2xsb3cgdGhlIGluc3RydWN0aW9ucyBhYm92ZS4KICAgICAgICAiIiIKCiAgICAgICAgZGVmIHdyYXBwZXIoc2VsZjogVHJhaW5lciwgKmFyZ3MsICoqa3dhcmdzKToKICAgICAgICAgICAgIyBSZXN0b3JlIHRoZSBldmFsdWF0aW9uIG1ldGhvZCBhcyBgdHJhaW5gIHdpbGwgdXNlIGl0OgogICAgICAgICAgICAjIGNscy5fcmVzdG9yZV9hdHRyaWJ1dGUob2JqPXNlbGYsIGF0dHJpYnV0ZV9uYW1lPSJldmFsdWF0ZSIpCgogICAgICAgICAgICAjIENhbGwgdGhlIG9yaWdpbmFsIGZpdCBtZXRob2Q6CiAgICAgICAgICAgIHJlc3VsdCA9IHNlbGYub3JpZ2luYWxfdHJhaW4oKmFyZ3MsICoqa3dhcmdzKQoKICAgICAgICAgICAgIyBSZXBsYWNlIHRoZSBldmFsdWF0aW9uIG1ldGhvZCBhZ2FpbjoKICAgICAgICAgICAgIyBjbHMuX3JlcGxhY2VfZnVuY3Rpb24ob2JqPXNlbGYsIGZ1bmN0aW9uX25hbWU9ImV2YWx1YXRlIikKCiAgICAgICAgICAgIHJldHVybiByZXN1bHQKCiAgICAgICAgcmV0dXJuIHdyYXBwZXIKCgpjbGFzcyBNTFJ1bkNhbGxiYWNrKFRyYWluZXJDYWxsYmFjayk6CiAgICAiIiIKICAgIENhbGxiYWNrIGZvciBjb2xsZWN0aW5nIGxvZ3MgZHVyaW5nIHRyYWluaW5nIC8gZXZhbHVhdGlvbiBvZiB0aGUgYFRyYWluZXJgIEFQSS4KICAgICIiIgoKICAgIGRlZiBfX2luaXRfXygKICAgICAgICBzZWxmLAogICAgICAgIGNvbnRleHQ6IG1scnVuLk1MQ2xpZW50Q3R4ID0gTm9uZSwKICAgICAgICBtb2RlbF9uYW1lOiBzdHIgPSAibW9kZWwiLAogICAgICAgIHRhZzogc3RyID0gIiIsCiAgICAgICAgbGFiZWxzOiBEaWN0W3N0ciwgc3RyXSA9IE5vbmUsCiAgICAgICAgZXh0cmFfZGF0YTogZGljdCA9IE5vbmUsCiAgICApOgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKQoKICAgICAgICAjIFN0b3JlIHRoZSBjb25maWd1cmF0aW9uczoKICAgICAgICBzZWxmLl9jb250ZXh0ID0gKAogICAgICAgICAgICBjb250ZXh0CiAgICAgICAgICAgIGlmIGNvbnRleHQgaXMgbm90IE5vbmUKICAgICAgICAgICAgZWxzZSBtbHJ1bi5nZXRfb3JfY3JlYXRlX2N0eCgiLi9tbHJ1bi1odWdnaW5nZmFjZSIpCiAgICAgICAgKQogICAgICAgIHNlbGYuX21vZGVsX25hbWUgPSBtb2RlbF9uYW1lCiAgICAgICAgc2VsZi5fdGFnID0gdGFnCiAgICAgICAgc2VsZi5fbGFiZWxzID0gbGFiZWxzCiAgICAgICAgc2VsZi5fZXh0cmFfZGF0YSA9IGV4dHJhX2RhdGEgaWYgZXh0cmFfZGF0YSBpcyBub3QgTm9uZSBlbHNlIHt9CgogICAgICAgICMgU2V0IHVwIHRoZSBsb2dnaW5nIG1vZGU6CiAgICAgICAgc2VsZi5faXNfdHJhaW5pbmcgPSBGYWxzZQogICAgICAgIHNlbGYuX3N0ZXBzOiBMaXN0W0xpc3RbaW50XV0gPSBbXQogICAgICAgIHNlbGYuX21ldHJpY19zY29yZXM6IERpY3Rbc3RyLCBMaXN0W2Zsb2F0XV0gPSB7fQogICAgICAgIHNlbGYuX2FydGlmYWN0czogRGljdFtzdHIsIEFydGlmYWN0XSA9IHt9CgogICAgZGVmIG9uX2Vwb2NoX2JlZ2luKAogICAgICAgIHNlbGYsCiAgICAgICAgYXJnczogVHJhaW5pbmdBcmd1bWVudHMsCiAgICAgICAgc3RhdGU6IFRyYWluZXJTdGF0ZSwKICAgICAgICBjb250cm9sOiBUcmFpbmVyQ29udHJvbCwKICAgICAgICAqKmt3YXJncywKICAgICk6CiAgICAgICAgc2VsZi5fc3RlcHMuYXBwZW5kKFtdKQoKICAgIGRlZiBvbl9lcG9jaF9lbmQoCiAgICAgICAgc2VsZiwKICAgICAgICBhcmdzOiBUcmFpbmluZ0FyZ3VtZW50cywKICAgICAgICBzdGF0ZTogVHJhaW5lclN0YXRlLAogICAgICAgIGNvbnRyb2w6IFRyYWluZXJDb250cm9sLAogICAgICAgICoqa3dhcmdzLAogICAgKToKICAgICAgICBzZWxmLl9sb2dfbWV0cmljcygpCgogICAgZGVmIG9uX2xvZygKICAgICAgICBzZWxmLAogICAgICAgIGFyZ3M6IFRyYWluaW5nQXJndW1lbnRzLAogICAgICAgIHN0YXRlOiBUcmFpbmVyU3RhdGUsCiAgICAgICAgY29udHJvbDogVHJhaW5lckNvbnRyb2wsCiAgICAgICAgbG9nczogRGljdFtzdHIsIGZsb2F0XSA9IE5vbmUsCiAgICAgICAgKiprd2FyZ3MsCiAgICApOgogICAgICAgIHJlY2VudF9sb2dzID0gc3RhdGUubG9nX2hpc3RvcnlbLTFdLmNvcHkoKQoKICAgICAgICByZWNlbnRfbG9ncy5wb3AoImVwb2NoIikKICAgICAgICBjdXJyZW50X3N0ZXAgPSBpbnQocmVjZW50X2xvZ3MucG9wKCJzdGVwIikpCiAgICAgICAgaWYgY3VycmVudF9zdGVwIG5vdCBpbiBzZWxmLl9zdGVwc1stMV06CiAgICAgICAgICAgIHNlbGYuX3N0ZXBzWy0xXS5hcHBlbmQoY3VycmVudF9zdGVwKQoKICAgICAgICBmb3IgbWV0cmljX25hbWUsIG1ldHJpY19zY29yZSBpbiByZWNlbnRfbG9ncy5pdGVtcygpOgogICAgICAgICAgICBpZiBtZXRyaWNfbmFtZS5zdGFydHN3aXRoKCJ0cmFpbl8iKToKICAgICAgICAgICAgICAgIGlmIG1ldHJpY19uYW1lLnNwbGl0KCJ0cmFpbl8iKVsxXSBub3QgaW4gc2VsZi5fbWV0cmljX3Njb3JlczoKICAgICAgICAgICAgICAgICAgICBzZWxmLl9tZXRyaWNfc2NvcmVzW21ldHJpY19uYW1lXSA9IFttZXRyaWNfc2NvcmVdCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBpZiBtZXRyaWNfbmFtZSBub3QgaW4gc2VsZi5fbWV0cmljX3Njb3JlczoKICAgICAgICAgICAgICAgIHNlbGYuX21ldHJpY19zY29yZXNbbWV0cmljX25hbWVdID0gW10KICAgICAgICAgICAgc2VsZi5fbWV0cmljX3Njb3Jlc1ttZXRyaWNfbmFtZV0uYXBwZW5kKG1ldHJpY19zY29yZSkKCiAgICBkZWYgb25fdHJhaW5fYmVnaW4oCiAgICAgICAgc2VsZiwKICAgICAgICBhcmdzOiBUcmFpbmluZ0FyZ3VtZW50cywKICAgICAgICBzdGF0ZTogVHJhaW5lclN0YXRlLAogICAgICAgIGNvbnRyb2w6IFRyYWluZXJDb250cm9sLAogICAgICAgICoqa3dhcmdzLAogICAgKToKICAgICAgICBzZWxmLl9pc190cmFpbmluZyA9IFRydWUKCiAgICBkZWYgb25fdHJhaW5fZW5kKAogICAgICAgIHNlbGYsCiAgICAgICAgYXJnczogVHJhaW5pbmdBcmd1bWVudHMsCiAgICAgICAgc3RhdGU6IFRyYWluZXJTdGF0ZSwKICAgICAgICBjb250cm9sOiBUcmFpbmVyQ29udHJvbCwKICAgICAgICBtb2RlbDogUHJlVHJhaW5lZE1vZGVsID0gTm9uZSwKICAgICAgICB0b2tlbml6ZXI6IFByZVRyYWluZWRUb2tlbml6ZXIgPSBOb25lLAogICAgICAgICoqa3dhcmdzLAogICAgKToKICAgICAgICBzZWxmLl9sb2dfbWV0cmljcygpCgogICAgICAgIHRlbXBfZGlyZWN0b3J5ID0gdGVtcGZpbGUuZ2V0dGVtcGRpcigpCgogICAgICAgICMgU2F2ZSBhbmQgbG9nIHRoZSB0b2tlbml6ZXI6CiAgICAgICAgaWYgdG9rZW5pemVyIGlzIG5vdCBOb25lOgogICAgICAgICAgICAjIFNhdmUgdG9rZW5pemVyOgogICAgICAgICAgICB0b2tlbml6ZXJfZGlyID0gb3MucGF0aC5qb2luKHRlbXBfZGlyZWN0b3J5LCAidG9rZW5pemVyIikKICAgICAgICAgICAgdG9rZW5pemVyLnNhdmVfcHJldHJhaW5lZChzYXZlX2RpcmVjdG9yeT10b2tlbml6ZXJfZGlyKQogICAgICAgICAgICAjIFppcCB0aGUgdG9rZW5pemVyIGRpcmVjdG9yeToKICAgICAgICAgICAgdG9rZW5pemVyX3ppcCA9IHNodXRpbC5tYWtlX2FyY2hpdmUoCiAgICAgICAgICAgICAgICBiYXNlX25hbWU9InRva2VuaXplciIsCiAgICAgICAgICAgICAgICBmb3JtYXQ9InppcCIsCiAgICAgICAgICAgICAgICByb290X2Rpcj10b2tlbml6ZXJfZGlyLAogICAgICAgICAgICApCiAgICAgICAgICAgICMgTG9nIHRoZSB6aXAgZmlsZToKICAgICAgICAgICAgc2VsZi5fYXJ0aWZhY3RzWyJ0b2tlbml6ZXIiXSA9IHNlbGYuX2NvbnRleHQubG9nX2FydGlmYWN0KAogICAgICAgICAgICAgICAgaXRlbT0idG9rZW5pemVyIiwgbG9jYWxfcGF0aD10b2tlbml6ZXJfemlwCiAgICAgICAgICAgICkKCiAgICAgICAgIyBTYXZlIHRoZSBtb2RlbDoKICAgICAgICBtb2RlbF9kaXIgPSBvcy5wYXRoLmpvaW4odGVtcF9kaXJlY3RvcnksICJtb2RlbCIpCiAgICAgICAgbW9kZWwuc2F2ZV9wcmV0cmFpbmVkKHNhdmVfZGlyZWN0b3J5PW1vZGVsX2RpcikKCiAgICAgICAgIyBaaXAgdGhlIG1vZGVsIGRpcmVjdG9yeToKICAgICAgICBzaHV0aWwubWFrZV9hcmNoaXZlKAogICAgICAgICAgICBiYXNlX25hbWU9Im1vZGVsIiwKICAgICAgICAgICAgZm9ybWF0PSJ6aXAiLAogICAgICAgICAgICByb290X2Rpcj1tb2RlbF9kaXIsCiAgICAgICAgKQoKICAgICAgICAjIExvZyB0aGUgbW9kZWw6CiAgICAgICAgc2VsZi5fY29udGV4dC5sb2dfbW9kZWwoCiAgICAgICAgICAgIGtleT0ibW9kZWwiLAogICAgICAgICAgICBkYl9rZXk9c2VsZi5fbW9kZWxfbmFtZSwKICAgICAgICAgICAgbW9kZWxfZmlsZT0ibW9kZWwuemlwIiwKICAgICAgICAgICAgdGFnPXNlbGYuX3RhZywKICAgICAgICAgICAgZnJhbWV3b3JrPSJIdWdnaW5nIEZhY2UiLAogICAgICAgICAgICBsYWJlbHM9c2VsZi5fbGFiZWxzLAogICAgICAgICAgICBleHRyYV9kYXRhPXsqKnNlbGYuX2FydGlmYWN0cywgKipzZWxmLl9leHRyYV9kYXRhfSwKICAgICAgICApCgogICAgZGVmIG9uX2V2YWx1YXRlKAogICAgICAgIHNlbGYsCiAgICAgICAgYXJnczogVHJhaW5pbmdBcmd1bWVudHMsCiAgICAgICAgc3RhdGU6IFRyYWluZXJTdGF0ZSwKICAgICAgICBjb250cm9sOiBUcmFpbmVyQ29udHJvbCwKICAgICAgICAqKmt3YXJncywKICAgICk6CiAgICAgICAgc2VsZi5fbG9nX21ldHJpY3MoKQoKICAgICAgICBpZiBzZWxmLl9pc190cmFpbmluZzoKICAgICAgICAgICAgcmV0dXJuCgogICAgICAgICMgVE9ETzogVXBkYXRlIHRoZSBtb2RlbCBvYmplY3QKCiAgICBkZWYgX2xvZ19tZXRyaWNzKHNlbGYpOgogICAgICAgIGZvciBtZXRyaWNfbmFtZSwgbWV0cmljX3Njb3JlcyBpbiBzZWxmLl9tZXRyaWNfc2NvcmVzLml0ZW1zKCk6CiAgICAgICAgICAgIHNlbGYuX2NvbnRleHQubG9nX3Jlc3VsdChrZXk9bWV0cmljX25hbWUsIHZhbHVlPW1ldHJpY19zY29yZXNbLTFdKQogICAgICAgICAgICBpZiBsZW4obWV0cmljX3Njb3JlcykgPiAxOgogICAgICAgICAgICAgICAgc2VsZi5fbG9nX21ldHJpY19wbG90KG5hbWU9bWV0cmljX25hbWUsIHNjb3Jlcz1tZXRyaWNfc2NvcmVzKQogICAgICAgIHNlbGYuX2NvbnRleHQuY29tbWl0KGNvbXBsZXRlZD1GYWxzZSkKCiAgICBkZWYgX2xvZ19tZXRyaWNfcGxvdChzZWxmLCBuYW1lOiBzdHIsIHNjb3JlczogTGlzdFtmbG9hdF0pOgogICAgICAgICMgSW5pdGlhbGl6ZSBhIHBsb3RseSBmaWd1cmU6CiAgICAgICAgbWV0cmljX2ZpZ3VyZSA9IGdvLkZpZ3VyZSgpCgogICAgICAgICMgQWRkIHRpdGxlczoKICAgICAgICBtZXRyaWNfZmlndXJlLnVwZGF0ZV9sYXlvdXQoCiAgICAgICAgICAgIHRpdGxlPW5hbWUuY2FwaXRhbGl6ZSgpLnJlcGxhY2UoIl8iLCAiICIpLAogICAgICAgICAgICB4YXhpc190aXRsZT0iU2FtcGxlcyIsCiAgICAgICAgICAgIHlheGlzX3RpdGxlPSJTY29yZXMiLAogICAgICAgICkKCiAgICAgICAgIyBEcmF3OgogICAgICAgIG1ldHJpY19maWd1cmUuYWRkX3RyYWNlKAogICAgICAgICAgICBnby5TY2F0dGVyKHg9bnAuYXJhbmdlKGxlbihzY29yZXMpKSwgeT1zY29yZXMsIG1vZGU9ImxpbmVzIikKICAgICAgICApCgogICAgICAgICMgQ3JlYXRlIHRoZSBwbG90bHkgYXJ0aWZhY3Q6CiAgICAgICAgYXJ0aWZhY3RfbmFtZSA9IGYie25hbWV9X3Bsb3QiCiAgICAgICAgYXJ0aWZhY3QgPSBQbG90bHlBcnRpZmFjdChrZXk9YXJ0aWZhY3RfbmFtZSwgZmlndXJlPW1ldHJpY19maWd1cmUpCiAgICAgICAgc2VsZi5fYXJ0aWZhY3RzW2FydGlmYWN0X25hbWVdID0gc2VsZi5fY29udGV4dC5sb2dfYXJ0aWZhY3QoYXJ0aWZhY3QpCgoKZGVmIF9hcHBseV9tbHJ1bl9vbl90cmFpbmVyKAogICAgdHJhaW5lcjogdHJhbnNmb3JtZXJzLlRyYWluZXIsCiAgICBtb2RlbF9uYW1lOiBzdHIgPSBOb25lLAogICAgdGFnOiBzdHIgPSAiIiwKICAgIGNvbnRleHQ6IG1scnVuLk1MQ2xpZW50Q3R4ID0gTm9uZSwKICAgIGF1dG9fbG9nOiBib29sID0gVHJ1ZSwKICAgIGxhYmVsczogRGljdFtzdHIsIHN0cl0gPSBOb25lLAogICAgZXh0cmFfZGF0YTogZGljdCA9IE5vbmUsCiAgICAqKmt3YXJncywKKToKICAgICMgR2V0IHBhcmFtZXRlcnMgZGVmYXVsdHM6CiAgICBpZiBjb250ZXh0IGlzIE5vbmU6CiAgICAgICAgY29udGV4dCA9IG1scnVuLmdldF9vcl9jcmVhdGVfY3R4KEhGVHJhaW5lck1MUnVuSW50ZXJmYWNlLkRFRkFVTFRfQ09OVEVYVF9OQU1FKQoKICAgIEhGVHJhaW5lck1MUnVuSW50ZXJmYWNlLmFkZF9pbnRlcmZhY2Uob2JqPXRyYWluZXIpCgogICAgaWYgYXV0b19sb2c6CiAgICAgICAgdHJhaW5lci5hZGRfY2FsbGJhY2soCiAgICAgICAgICAgIE1MUnVuQ2FsbGJhY2soCiAgICAgICAgICAgICAgICBjb250ZXh0PWNvbnRleHQsCiAgICAgICAgICAgICAgICBtb2RlbF9uYW1lPW1vZGVsX25hbWUsCiAgICAgICAgICAgICAgICB0YWc9dGFnLAogICAgICAgICAgICAgICAgbGFiZWxzPWxhYmVscywKICAgICAgICAgICAgICAgIGV4dHJhX2RhdGE9ZXh0cmFfZGF0YSwKICAgICAgICAgICAgKQogICAgICAgICkKCgpkZWYgX2FwcGx5X21scnVuX29uX29wdGltaXplcigKICAgIG9wdGltaXplciwKICAgIG1vZGVsX25hbWU6IHN0ciA9IE5vbmUsCiAgICB0YWc6IHN0ciA9ICIiLAogICAgY29udGV4dDogbWxydW4uTUxDbGllbnRDdHggPSBOb25lLAogICAgYXV0b19sb2c6IGJvb2wgPSBUcnVlLAogICAgbGFiZWxzOiBEaWN0W3N0ciwgc3RyXSA9IE5vbmUsCiAgICBleHRyYV9kYXRhOiBkaWN0ID0gTm9uZSwKICAgICoqa3dhcmdzLAopOgogICAgIyBHZXQgcGFyYW1ldGVycyBkZWZhdWx0czoKICAgIGlmIGNvbnRleHQgaXMgTm9uZToKICAgICAgICBjb250ZXh0ID0gbWxydW4uZ2V0X29yX2NyZWF0ZV9jdHgoCiAgICAgICAgICAgIEhGT1JUT3B0aW1pemVyTUxSdW5JbnRlcmZhY2UuREVGQVVMVF9DT05URVhUX05BTUUKICAgICAgICApCgogICAgSEZPUlRPcHRpbWl6ZXJNTFJ1bkludGVyZmFjZS5hZGRfaW50ZXJmYWNlKG9iaj1vcHRpbWl6ZXIpCgogICAgaWYgYXV0b19sb2c6CiAgICAgICAgb3B0aW1pemVyLmVuYWJsZV9hdXRvX2xvZ2dpbmcoCiAgICAgICAgICAgIGNvbnRleHQ9Y29udGV4dCwKICAgICAgICAgICAgbW9kZWxfbmFtZT1tb2RlbF9uYW1lLAogICAgICAgICAgICB0YWc9dGFnLAogICAgICAgICAgICBsYWJlbHM9bGFiZWxzLAogICAgICAgICAgICBleHRyYV9kYXRhPWV4dHJhX2RhdGEsCiAgICAgICAgKQoKCmRlZiBhcHBseV9tbHJ1bigKICAgIGh1Z2dpbmdmYWNlX29iamVjdCwKICAgIG1vZGVsX25hbWU6IHN0ciA9IE5vbmUsCiAgICB0YWc6IHN0ciA9ICIiLAogICAgY29udGV4dDogbWxydW4uTUxDbGllbnRDdHggPSBOb25lLAogICAgYXV0b19sb2c6IGJvb2wgPSBUcnVlLAogICAgbGFiZWxzOiBEaWN0W3N0ciwgc3RyXSA9IE5vbmUsCiAgICBleHRyYV9kYXRhOiBkaWN0ID0gTm9uZSwKICAgICoqa3dhcmdzLAopOgogICAgIiIiCiAgICBXcmFwIHRoZSBnaXZlbiBtb2RlbCB3aXRoIE1MUnVuJ3MgaW50ZXJmYWNlIHByb3ZpZGluZyBpdCB3aXRoIG1scnVuJ3MgYWRkaXRpb25hbCBmZWF0dXJlcy4KICAgIDpwYXJhbSBodWdnaW5nZmFjZV9vYmplY3Q6IFRoZSBtb2RlbCB0byB3cmFwLiBDYW4gYmUgbG9hZGVkIGZyb20gdGhlIG1vZGVsIHBhdGggZ2l2ZW4gYXMgd2VsbC4KICAgIDpwYXJhbSBtb2RlbF9uYW1lOiAgICAgICAgIFRoZSBtb2RlbCBuYW1lIHRvIHVzZSBmb3Igc3RvcmluZyB0aGUgbW9kZWwgYXJ0aWZhY3QuIERlZmF1bHQ6ICJtb2RlbCIuCiAgICA6cGFyYW0gdGFnOiAgICAgICAgICAgICAgICBUaGUgbW9kZWwncyB0YWcgdG8gbG9nIHdpdGguCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICAgICBNTFJ1biBjb250ZXh0IHRvIHdvcmsgd2l0aC4gSWYgbm8gY29udGV4dCBpcyBnaXZlbiBpdCB3aWxsIGJlIHJldHJpZXZlZCB2aWEKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdtbHJ1bi5nZXRfb3JfY3JlYXRlX2N0eChOb25lKScKICAgIDpwYXJhbSBhdXRvX2xvZzogICAgICAgICAgIFdoZXRoZXIgdG8gZW5hYmxlIE1MUnVuJ3MgYXV0byBsb2dnaW5nLiBEZWZhdWx0OiBUcnVlLgogICAgIiIiCgogICAgaWYgaXNpbnN0YW5jZShodWdnaW5nZmFjZV9vYmplY3QsIHRyYW5zZm9ybWVycy5UcmFpbmVyKToKICAgICAgICByZXR1cm4gX2FwcGx5X21scnVuX29uX3RyYWluZXIoCiAgICAgICAgICAgIHRyYWluZXI9aHVnZ2luZ2ZhY2Vfb2JqZWN0LAogICAgICAgICAgICBtb2RlbF9uYW1lPW1vZGVsX25hbWUsCiAgICAgICAgICAgIHRhZz10YWcsCiAgICAgICAgICAgIGNvbnRleHQ9Y29udGV4dCwKICAgICAgICAgICAgYXV0b19sb2c9YXV0b19sb2csCiAgICAgICAgICAgIGxhYmVscz1sYWJlbHMsCiAgICAgICAgICAgIGV4dHJhX2RhdGE9ZXh0cmFfZGF0YSwKICAgICAgICApCiAgICBpbXBvcnQgb3B0aW11bS5vbm54cnVudGltZSBhcyBvcHRpbXVtX29ydAoKICAgIGlmIGlzaW5zdGFuY2UoaHVnZ2luZ2ZhY2Vfb2JqZWN0LCBvcHRpbXVtX29ydC5PUlRPcHRpbWl6ZXIpOgogICAgICAgIHJldHVybiBfYXBwbHlfbWxydW5fb25fb3B0aW1pemVyKAogICAgICAgICAgICBvcHRpbWl6ZXI9aHVnZ2luZ2ZhY2Vfb2JqZWN0LAogICAgICAgICAgICBtb2RlbF9uYW1lPW1vZGVsX25hbWUsCiAgICAgICAgICAgIHRhZz10YWcsCiAgICAgICAgICAgIGNvbnRleHQ9Y29udGV4dCwKICAgICAgICAgICAgYXV0b19sb2c9YXV0b19sb2csCiAgICAgICAgICAgIGxhYmVscz1sYWJlbHMsCiAgICAgICAgICAgIGV4dHJhX2RhdGE9ZXh0cmFfZGF0YSwKICAgICAgICApCiAgICByYWlzZSBtbHJ1bi5lcnJvcnMuTUxSdW5JbnZhbGlkQXJndW1lbnRFcnJvcgoKCiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBmcm9tIGF1dG9fdHJhaW5lci0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCmNsYXNzIEtXQXJnc1ByZWZpeGVzOgogICAgTU9ERUxfQ0xBU1MgPSAiQ0xBU1NfIgogICAgRklUID0gIkZJVF8iCiAgICBUUkFJTiA9ICJUUkFJTl8iCiAgICBQUkVESUNUID0gIlBSRURJQ1RfIgoKCmRlZiBfZ2V0X3N1Yl9kaWN0X2J5X3ByZWZpeChzcmM6IERpY3QsIHByZWZpeF9rZXk6IHN0cikgLT4gRGljdFtzdHIsIEFueV06CiAgICAiIiIKICAgIENvbGxlY3QgYWxsIHRoZSBrZXlzIGZyb20gdGhlIGdpdmVuIGRpY3QgdGhhdCBzdGFydHMgd2l0aCB0aGUgZ2l2ZW4gcHJlZml4IGFuZCBjcmVhdGVzIGEgbmV3IGRpY3Rpb25hcnkgd2l0aCB0aGVzZQogICAga2V5cy4KCiAgICA6cGFyYW0gc3JjOiAgICAgICAgIFRoZSBzb3VyY2UgZGljdCB0byBleHRyYWN0IHRoZSB2YWx1ZXMgZnJvbS4KICAgIDpwYXJhbSBwcmVmaXhfa2V5OiAgT25seSBrZXlzIHdpdGggdGhpcyBwcmVmaXggd2lsbCBiZSByZXR1cm5lZC4gVGhlIGtleXMgaW4gdGhlIHJlc3VsdCBkaWN0IHdpbGwgYmUgd2l0aG91dCB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeC4KICAgICIiIgogICAgcmV0dXJuIHsKICAgICAgICBrZXkucmVwbGFjZShwcmVmaXhfa2V5LCAiIik6IHZhbAogICAgICAgIGZvciBrZXksIHZhbCBpbiBzcmMuaXRlbXMoKQogICAgICAgIGlmIGtleS5zdGFydHN3aXRoKHByZWZpeF9rZXkpCiAgICB9CgoKZGVmIF9nZXRfZGF0YWZyYW1lKAogICAgY29udGV4dDogTUxDbGllbnRDdHgsCiAgICBkYXRhc2V0OiBEYXRhSXRlbSwKICAgIGxhYmVsX2NvbHVtbnM6IE9wdGlvbmFsW1VuaW9uW3N0ciwgTGlzdFtzdHJdXV0gPSBOb25lLAogICAgZHJvcF9jb2x1bW5zOiBVbmlvbltzdHIsIExpc3Rbc3RyXSwgaW50LCBMaXN0W2ludF1dID0gTm9uZSwKKSAtPiBUdXBsZVtwZC5EYXRhRnJhbWUsIE9wdGlvbmFsW1VuaW9uW3N0ciwgTGlzdFtzdHJdXV1dOgogICAgIiIiCiAgICBHZXR0aW5nIHRoZSBEYXRhRnJhbWUgb2YgdGhlIGRhdGFzZXQgYW5kIGRyb3AgdGhlIGNvbHVtbnMgYWNjb3JkaW5nbHkuCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgTUxSdW4gY29udGV4dC4KICAgIDpwYXJhbSBkYXRhc2V0OiAgICAgICAgIFRoZSBkYXRhc2V0IHRvIHRyYWluIHRoZSBtb2RlbCBvbi4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbiBiZSBlaXRoZXIgYSBsaXN0IG9mIGxpc3RzLCBkaWN0LCBVUkkgb3IgYSBGZWF0dXJlVmVjdG9yLgogICAgOnBhcmFtIGxhYmVsX2NvbHVtbnM6ICAgVGhlIHRhcmdldCBsYWJlbChzKSBvZiB0aGUgY29sdW1uKHMpIGluIHRoZSBkYXRhc2V0LiBmb3IgUmVncmVzc2lvbiBvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2xhc3NpZmljYXRpb24gdGFza3MuCiAgICA6cGFyYW0gZHJvcF9jb2x1bW5zOiAgICBzdHIvaW50IG9yIGEgbGlzdCBvZiBzdHJpbmdzL2ludHMgdGhhdCByZXByZXNlbnQgdGhlIGNvbHVtbiBuYW1lcy9pbmRpY2VzIHRvIGRyb3AuCiAgICAiIiIKICAgIGlmIGlzaW5zdGFuY2UoZGF0YXNldCwgKGxpc3QsIGRpY3QpKToKICAgICAgICBkYXRhc2V0ID0gcGQuRGF0YUZyYW1lKGRhdGFzZXQpCiAgICAgICAgIyBDaGVja2luZyBpZiBkcm9wX2NvbHVtbnMgcHJvdmlkZWQgYnkgaW50ZWdlciB0eXBlOgogICAgICAgIGlmIGRyb3BfY29sdW1uczoKICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShkcm9wX2NvbHVtbnMsIHN0cikgb3IgKAogICAgICAgICAgICAgICAgaXNpbnN0YW5jZShkcm9wX2NvbHVtbnMsIGxpc3QpCiAgICAgICAgICAgICAgICBhbmQgYW55KGlzaW5zdGFuY2UoY29sLCBzdHIpIGZvciBjb2wgaW4gZHJvcF9jb2x1bW5zKQogICAgICAgICAgICApOgogICAgICAgICAgICAgICAgY29udGV4dC5sb2dnZXIuZXJyb3IoCiAgICAgICAgICAgICAgICAgICAgImRyb3BfY29sdW1ucyBtdXN0IGJlIGFuIGludGVnZXIvbGlzdCBvZiBpbnRlZ2VycyBpZiBub3QgcHJvdmlkZWQgd2l0aCBhIFVSSS9GZWF0dXJlVmVjdG9yIGRhdGFzZXQiCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yCiAgICAgICAgICAgIGRhdGFzZXQuZHJvcChkcm9wX2NvbHVtbnMsIGF4aXM9MSwgaW5wbGFjZT1UcnVlKQoKICAgICAgICByZXR1cm4gZGF0YXNldCwgbGFiZWxfY29sdW1ucwoKICAgIGlmIGRhdGFzZXQubWV0YSBhbmQgZGF0YXNldC5tZXRhLmtpbmQgPT0gT2JqZWN0S2luZC5mZWF0dXJlX3ZlY3RvcjoKICAgICAgICAjIGZlYXR1cmUtdmVjdG9yIGNhc2U6CiAgICAgICAgbGFiZWxfY29sdW1ucyA9IGxhYmVsX2NvbHVtbnMgb3IgZGF0YXNldC5tZXRhLnN0YXR1cy5sYWJlbF9jb2x1bW4KICAgICAgICBkYXRhc2V0ID0gZnMuZ2V0X29mZmxpbmVfZmVhdHVyZXMoCiAgICAgICAgICAgIGRhdGFzZXQubWV0YS51cmksIGRyb3BfY29sdW1ucz1kcm9wX2NvbHVtbnMKICAgICAgICApLnRvX2RhdGFmcmFtZSgpCgogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oZiJsYWJlbCBjb2x1bW5zOiB7bGFiZWxfY29sdW1uc30iKQogICAgZWxzZToKICAgICAgICAjIHNpbXBsZSBVUkwgY2FzZToKICAgICAgICBkYXRhc2V0ID0gZGF0YXNldC5hc19kZigpCiAgICAgICAgaWYgZHJvcF9jb2x1bW5zOgogICAgICAgICAgICBpZiBhbGwoY29sIGluIGRhdGFzZXQgZm9yIGNvbCBpbiBkcm9wX2NvbHVtbnMpOgogICAgICAgICAgICAgICAgZGF0YXNldCA9IGRhdGFzZXQuZHJvcChkcm9wX2NvbHVtbnMsIGF4aXM9MSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oCiAgICAgICAgICAgICAgICAgICAgIm5vdCBhbGwgb2YgdGhlIGNvbHVtbnMgdG8gZHJvcCBpbiB0aGUgZGF0YXNldCwgZHJvcCBjb2x1bW5zIHByb2Nlc3Mgc2tpcHBlZCIKICAgICAgICAgICAgICAgICkKICAgIHJldHVybiBkYXRhc2V0LCBsYWJlbF9jb2x1bW5zCgoKIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tIEh1Z2dpbmcgRmFjZSBUcmFpbmVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKZGVmIF9jcmVhdGVfY29tcHV0ZV9tZXRyaWNzKG1ldHJpY3M6IExpc3Rbc3RyXSkgLT4gQ2FsbGFibGVbW0V2YWxQcmVkaWN0aW9uXSwgRGljdF06CiAgICAiIiIKICAgIFRoaXMgZnVuY3Rpb24gY3JlYXRlIGFuZCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gY29tcHV0ZSBtZXRyaWNzIGF0IGV2YWx1YXRpb24uCiAgICA6cGFyYW0gbWV0cmljczogTGlzdCBvZiBkaWZmZXJlbnQgbWV0cmljcyBmb3IgZXZhbHVhdGUgdGhlIG1vZGVsIHN1Y2ggYXMgZjEsIGFjY3VyYWN5IGV0Yy4KCiAgICA6cmV0dXJuczogRnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gY29tcHV0ZSBtZXRyaWNzIGF0IGV2YWx1YXRpb24uCiAgICAgICAgICAgICBNdXN0IHRha2UgYSBbYEV2YWxQcmVkaWN0aW9uYF0gYW5kIHJldHVybiBhIGRpY3Rpb25hcnkgc3RyaW5nIHRvIG1ldHJpYyB2YWx1ZXMuCiAgICAiIiIKCiAgICBkZWYgX2NvbXB1dGVfbWV0cmljcyhldmFsX3ByZWQpOgogICAgICAgIGxvZ2l0cywgbGFiZWxzID0gZXZhbF9wcmVkCiAgICAgICAgcHJlZGljdGlvbnMgPSBucC5hcmdtYXgobG9naXRzLCBheGlzPS0xKQogICAgICAgIG1ldHJpY19kaWN0X3Jlc3VsdHMgPSB7fQogICAgICAgIGZvciBtZXRyaWMgaW4gbWV0cmljczoKICAgICAgICAgICAgbG9hZF9tZXQgPSBsb2FkX21ldHJpYyhtZXRyaWMpCiAgICAgICAgICAgIG1ldHJpY19yZXMgPSBsb2FkX21ldC5jb21wdXRlKHByZWRpY3Rpb25zPXByZWRpY3Rpb25zLCByZWZlcmVuY2VzPWxhYmVscylbCiAgICAgICAgICAgICAgICBtZXRyaWMKICAgICAgICAgICAgXQogICAgICAgICAgICBtZXRyaWNfZGljdF9yZXN1bHRzW21ldHJpY10gPSBtZXRyaWNfcmVzCgogICAgICAgIHJldHVybiBtZXRyaWNfZGljdF9yZXN1bHRzCgogICAgcmV0dXJuIF9jb21wdXRlX21ldHJpY3MKCgpkZWYgX2VkaXRfY29sdW1ucygKICAgIGRhdGFzZXQ6IERhdGFzZXQsCiAgICBkcm9wX2NvbHVtbnM6IExpc3Rbc3RyXSA9IE5vbmUsCiAgICByZW5hbWVfY29sdW1uczogW3N0ciwgc3RyXSA9IE5vbmUsCikgLT4gRGF0YXNldDoKICAgICIiIgogICAgRHJvcCBhbmQgcmVuYW1lcyB0aGF0IGNvbHVtbnMgb2YgdGhlIGdpdmVuIGRhdGFzZXQKICAgIDpwYXJhbSBkYXRhc2V0OiAgICAgICAgIERhdGFzZXQgdG8gcHJvY2VzcwogICAgOnBhcmFtIGRyb3BfY29sdW1uczogICAgVGhlIGNvbHVtbnMgdG8gZHJvcCBmcm9tIHRoZSBkYXRhc2V0LgogICAgOnBhcmFtIHJlbmFtZV9jb2x1bW5zOiAgRGljdCBvZiBjb2x1bW5zIHJvIHJlbmFtZSA6IHs8b2xkX25hbWU+OiA8bmV3X25hbWU+LCAuLi59CgogICAgOnJldHVybnM6IFRoZSBkYXRhc2V0IGFmdGVyIHRoZSBkZXNpcmVkIHByb2Nlc3MKICAgICIiIgogICAgaWYgZHJvcF9jb2x1bW5zOgogICAgICAgIGRhdGFzZXQgPSBkYXRhc2V0LnJlbW92ZV9jb2x1bW5zKGRyb3BfY29sdW1ucykKICAgIGlmIHJlbmFtZV9jb2x1bW5zOgogICAgICAgIGRhdGFzZXQgPSBkYXRhc2V0LnJlbmFtZV9jb2x1bW5zKHJlbmFtZV9jb2x1bW5zKQogICAgcmV0dXJuIGRhdGFzZXQKCgpkZWYgX3ByZXBhcmVfZGF0YXNldCgKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgZGF0YXNldF9uYW1lOiBzdHIsCiAgICBsYWJlbF9uYW1lOiBzdHIgPSBOb25lLAogICAgZHJvcF9jb2x1bW5zOiBPcHRpb25hbFtMaXN0W3N0cl1dID0gTm9uZSwKICAgIG51bV9vZl90cmFpbl9zYW1wbGVzOiBpbnQgPSBOb25lLAogICAgdHJhaW5fdGVzdF9zcGxpdF9zaXplOiBmbG9hdCA9IE5vbmUsCiAgICByYW5kb21fc3RhdGU6IGludCA9IE5vbmUsCikgLT4gVHVwbGVbRGF0YXNldCwgRGF0YXNldF06CiAgICAiIiIKICAgIExvYWRpbmcgdGhlIGRhdGFzZXQgYW5kIGVkaXRpbmcgdGhlIGNvbHVtbnMKCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICAgICAgICAgIE1MUnVuIGNvbnRleAogICAgOnBhcmFtIGRhdGFzZXRfbmFtZTogICAgICAgICAgICBUaGUgbmFtZSBvZiB0aGUgZGF0YXNldCB0byBnZXQgZnJvbSB0aGUgSHVnZ2luZ0ZhY2UgaHViCiAgICA6cGFyYW0gbGFiZWxfbmFtZTogICAgICAgICAgICAgIFRoZSB0YXJnZXQgbGFiZWwgb2YgdGhlIGNvbHVtbiBpbiB0aGUgZGF0YXNldC4KICAgIDpwYXJhbSBkcm9wX2NvbHVtbnM6ICAgICAgICAgICAgVGhlIGNvbHVtbnMgdG8gZHJvcCBmcm9tIHRoZSBkYXRhc2V0LgogICAgOnBhcmFtIG51bV9vZl90cmFpbl9zYW1wbGVzOiAgICBNYXggbnVtYmVyIG9mIHRyYWluaW5nIHNhbXBsZXMsIGZvciBkZWJ1Z2dpbmcuCiAgICA6cGFyYW0gdHJhaW5fdGVzdF9zcGxpdF9zaXplOiAgIFNob3VsZCBiZSBiZXR3ZWVuIDAuMCBhbmQgMS4wIGFuZCByZXByZXNlbnQgdGhlIHByb3BvcnRpb24gb2YgdGhlIGRhdGFzZXQgdG8gaW5jbHVkZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgdGVzdCBzcGxpdC4KICAgIDpwYXJhbSByYW5kb21fc3RhdGU6ICAgICAgICAgICAgUmFuZG9tIHN0YXRlIGZvciB0cmFpbl90ZXN0X3NwbGl0CgogICAgIiIiCgogICAgY29udGV4dC5sb2dnZXIuaW5mbygKICAgICAgICBmIkxvYWRpbmcgYW5kIGVkaXRpbmcge2RhdGFzZXRfbmFtZX0gZGF0YXNldCBmcm9tIEh1Z2dpbmcgRmFjZSBodWIiCiAgICApCiAgICByZW5hbWVfY29scyA9IHtsYWJlbF9uYW1lOiAibGFiZWxzIn0KCiAgICAjIExvYWRpbmcgYW5kIGVkaXRpbmcgZGF0YXNldDoKICAgIGRhdGFzZXQgPSBsb2FkX2RhdGFzZXQoZGF0YXNldF9uYW1lKQoKICAgICMgdHJhaW4gc2V0CiAgICB0cmFpbl9kYXRhc2V0ID0gZGF0YXNldFsidHJhaW4iXQogICAgaWYgbnVtX29mX3RyYWluX3NhbXBsZXM6CiAgICAgICAgdHJhaW5fZGF0YXNldCA9IHRyYWluX2RhdGFzZXQuc2h1ZmZsZShzZWVkPXJhbmRvbV9zdGF0ZSkuc2VsZWN0KAogICAgICAgICAgICBsaXN0KHJhbmdlKG51bV9vZl90cmFpbl9zYW1wbGVzKSkKICAgICAgICApCiAgICB0cmFpbl9kYXRhc2V0ID0gX2VkaXRfY29sdW1ucyh0cmFpbl9kYXRhc2V0LCBkcm9wX2NvbHVtbnMsIHJlbmFtZV9jb2xzKQoKICAgICMgdGVzdCBzZXQKICAgIHRlc3RfZGF0YXNldCA9IGRhdGFzZXRbInRlc3QiXQogICAgaWYgdHJhaW5fdGVzdF9zcGxpdF9zaXplIG9yIG51bV9vZl90cmFpbl9zYW1wbGVzOgogICAgICAgIHRyYWluX3Rlc3Rfc3BsaXRfc2l6ZSA9IHRyYWluX3Rlc3Rfc3BsaXRfc2l6ZSBvciAwLjIKICAgICAgICBudW1fb2ZfdGVzdF9zYW1wbGVzID0gaW50KAogICAgICAgICAgICAodHJhaW5fZGF0YXNldC5udW1fcm93cyAqIHRyYWluX3Rlc3Rfc3BsaXRfc2l6ZSkKICAgICAgICAgICAgLy8gKDEgLSB0cmFpbl90ZXN0X3NwbGl0X3NpemUpCiAgICAgICAgKQogICAgICAgIHRlc3RfZGF0YXNldCA9IHRlc3RfZGF0YXNldC5zaHVmZmxlKHNlZWQ9cmFuZG9tX3N0YXRlKS5zZWxlY3QoCiAgICAgICAgICAgIGxpc3QocmFuZ2UobnVtX29mX3Rlc3Rfc2FtcGxlcykpCiAgICAgICAgKQogICAgdGVzdF9kYXRhc2V0ID0gX2VkaXRfY29sdW1ucyh0ZXN0X2RhdGFzZXQsIGRyb3BfY29sdW1ucywgcmVuYW1lX2NvbHMpCgogICAgcmV0dXJuIHRyYWluX2RhdGFzZXQsIHRlc3RfZGF0YXNldAoKCmRlZiB0cmFpbigKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgaGZfZGF0YXNldDogc3RyID0gTm9uZSwKICAgIGRhdGFzZXQ6IERhdGFJdGVtID0gTm9uZSwKICAgIGRyb3BfY29sdW1uczogT3B0aW9uYWxbTGlzdFtzdHJdXSA9IE5vbmUsCiAgICBwcmV0cmFpbmVkX3Rva2VuaXplcjogc3RyID0gTm9uZSwKICAgIHByZXRyYWluZWRfbW9kZWw6IHN0ciA9IE5vbmUsCiAgICBtb2RlbF9jbGFzczogc3RyID0gTm9uZSwKICAgIG1vZGVsX25hbWU6IHN0ciA9ICJodWdnaW5nZmFjZS1tb2RlbCIsCiAgICBsYWJlbF9uYW1lOiBzdHIgPSAibGFiZWxzIiwKICAgIHRleHRfY29sOiBzdHIgPSAidGV4dCIsCiAgICBudW1fb2ZfdHJhaW5fc2FtcGxlczogaW50ID0gTm9uZSwKICAgIHRyYWluX3Rlc3Rfc3BsaXRfc2l6ZTogZmxvYXQgPSBOb25lLAogICAgbWV0cmljczogTGlzdFtzdHJdID0gTm9uZSwKICAgIHJhbmRvbV9zdGF0ZTogaW50ID0gTm9uZSwKKToKICAgICIiIgogICAgVHJhaW5pbmcgYW5kIGV2YWx1YXRpbmcgYSBwcmV0cmFpbmVkIG1vZGVsIHdpdGggYSBwcmV0cmFpbmVkIHRva2VuaXplciBvdmVyIGEgZGF0YXNldC4KICAgIFRoZSBkYXRhc2V0IGNhbiBiZSBlaXRoZXIgYmUgdGhlIG5hbWUgb2YgdGhlIGRhdGFzZXQgdGhhdCBjb250YWlucyBpbiB0aGUgSHVnZ2luZ0ZhY2UgaHViLAogICAgb3IgYSBVUkkgb3IgYSBGZWF0dXJlVmVjdG9yCgogICAgOnBhcmFtIGNvbnRleHQ6ICAgICAgICAgICAgICAgICBNTFJ1biBjb250ZXh0CiAgICA6cGFyYW0gaGZfZGF0YXNldDogICAgICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBkYXRhc2V0IHRvIGdldCBmcm9tIHRoZSBIdWdnaW5nRmFjZSBodWIKICAgIDpwYXJhbSBkYXRhc2V0OiAgICAgICAgICAgICAgICAgVGhlIGRhdGFzZXQgdG8gdHJhaW4gdGhlIG1vZGVsIG9uLiBDYW4gYmUgZWl0aGVyIGEgVVJJIG9yIGEgRmVhdHVyZVZlY3RvcgogICAgOnBhcmFtIGRyb3BfY29sdW1uczogICAgICAgICAgICBUaGUgY29sdW1ucyB0byBkcm9wIGZyb20gdGhlIGRhdGFzZXQuCiAgICA6cGFyYW0gcHJldHJhaW5lZF90b2tlbml6ZXI6ICAgIFRoZSBuYW1lIG9mIHRoZSBwcmV0cmFpbmVkIHRva2VuaXplciBmcm9tIHRoZSBIdWdnaW5nRmFjZSBodWIuCiAgICA6cGFyYW0gcHJldHJhaW5lZF9tb2RlbDogICAgICAgIFRoZSBuYW1lIG9mIHRoZSBwcmV0cmFpbmVkIG1vZGVsIGZyb20gdGhlIEh1Z2dpbmdGYWNlIGh1Yi4KICAgIDpwYXJhbSBtb2RlbF9uYW1lOiAgICAgICAgICAgICAgVGhlIG1vZGVsJ3MgbmFtZSB0byB1c2UgZm9yIHN0b3JpbmcgdGhlIG1vZGVsIGFydGlmYWN0LCBkZWZhdWx0IHRvICdtb2RlbCcKICAgIDpwYXJhbSBtb2RlbF9jbGFzczogICAgICAgICAgICAgVGhlIGNsYXNzIG9mIHRoZSBtb2RlbCwgZS5nLiBgdHJhbnNmb3JtZXJzLkF1dG9Nb2RlbEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb25gCiAgICA6cGFyYW0gbGFiZWxfbmFtZTogICAgICAgICAgICAgIFRoZSB0YXJnZXQgbGFiZWwgb2YgdGhlIGNvbHVtbiBpbiB0aGUgZGF0YXNldC4KICAgIDpwYXJhbSB0ZXh0X2NvbDogICAgICAgICAgICAgICAgVGhlIGlucHV0IHRleHQgY29sdW1uIHVuIHRoZSBkYXRhc2V0LgogICAgOnBhcmFtIG51bV9vZl90cmFpbl9zYW1wbGVzOiAgICBNYXggbnVtYmVyIG9mIHRyYWluaW5nIHNhbXBsZXMsIGZvciBkZWJ1Z2dpbmcuCiAgICA6cGFyYW0gdHJhaW5fdGVzdF9zcGxpdF9zaXplOiAgIFNob3VsZCBiZSBiZXR3ZWVuIDAuMCBhbmQgMS4wIGFuZCByZXByZXNlbnQgdGhlIHByb3BvcnRpb24gb2YgdGhlIGRhdGFzZXQgdG8gaW5jbHVkZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgdGVzdCBzcGxpdC4KICAgIDpwYXJhbSBtZXRyaWNzOiAgICAgICAgICAgICAgICAgTGlzdCBvZiBkaWZmZXJlbnQgbWV0cmljcyBmb3IgZXZhbHVhdGUgdGhlIG1vZGVsIHN1Y2ggYXMgZjEsIGFjY3VyYWN5IGV0Yy4KICAgIDpwYXJhbSByYW5kb21fc3RhdGU6ICAgICAgICAgICAgUmFuZG9tIHN0YXRlIGZvciB0cmFpbl90ZXN0X3NwbGl0CiAgICAiIiIKCiAgICBpZiB0cmFpbl90ZXN0X3NwbGl0X3NpemUgaXMgTm9uZToKICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKAogICAgICAgICAgICAiJ3RyYWluX3Rlc3Rfc3BsaXRfc2l6ZScgaXMgbm90IHByb3ZpZGVkLCBzZXR0aW5nIHRyYWluX3Rlc3Rfc3BsaXRfc2l6ZSB0byAwLjIiCiAgICAgICAgKQogICAgICAgIHRyYWluX3Rlc3Rfc3BsaXRfc2l6ZSA9IDAuMgoKICAgICMgQ3JlYXRpbmcgdG9rZW5pemVyOgogICAgdG9rZW5pemVyID0gQXV0b1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQocHJldHJhaW5lZF90b2tlbml6ZXIpCgogICAgZGVmIHByZXByb2Nlc3NfZnVuY3Rpb24oZXhhbXBsZXMpOgogICAgICAgIHJldHVybiB0b2tlbml6ZXIoZXhhbXBsZXNbdGV4dF9jb2xdLCB0cnVuY2F0aW9uPVRydWUpCgogICAgIyBwcmVwYXJlIGRhdGEgZm9yIHRyYWluaW5nCiAgICBpZiBoZl9kYXRhc2V0OgogICAgICAgIHRyYWluX2RhdGFzZXQsIHRlc3RfZGF0YXNldCA9IF9wcmVwYXJlX2RhdGFzZXQoCiAgICAgICAgICAgIGNvbnRleHQsCiAgICAgICAgICAgIGhmX2RhdGFzZXQsCiAgICAgICAgICAgIGxhYmVsX25hbWUsCiAgICAgICAgICAgIGRyb3BfY29sdW1ucywKICAgICAgICAgICAgbnVtX29mX3RyYWluX3NhbXBsZXMsCiAgICAgICAgICAgIHRyYWluX3Rlc3Rfc3BsaXRfc2l6ZSwKICAgICAgICAgICAgcmFuZG9tX3N0YXRlPXJhbmRvbV9zdGF0ZSwKICAgICAgICApCiAgICBlbGlmIGRhdGFzZXQ6CiAgICAgICAgIyBHZXQgRGF0YUZyYW1lIGJ5IFVSTCBvciBieSBGZWF0dXJlVmVjdG9yOgogICAgICAgIGRhdGFzZXQsIGxhYmVsX25hbWUgPSBfZ2V0X2RhdGFmcmFtZSgKICAgICAgICAgICAgY29udGV4dD1jb250ZXh0LAogICAgICAgICAgICBkYXRhc2V0PWRhdGFzZXQsCiAgICAgICAgICAgIGxhYmVsX2NvbHVtbnM9bGFiZWxfbmFtZSwKICAgICAgICAgICAgZHJvcF9jb2x1bW5zPWRyb3BfY29sdW1ucywKICAgICAgICApCiAgICAgICAgdHJhaW5fZGF0YXNldCwgdGVzdF9kYXRhc2V0ID0gdHJhaW5fdGVzdF9zcGxpdCgKICAgICAgICAgICAgZGF0YXNldCwgdGVzdF9zaXplPXRyYWluX3Rlc3Rfc3BsaXRfc2l6ZSwgcmFuZG9tX3N0YXRlPXJhbmRvbV9zdGF0ZQogICAgICAgICkKICAgICAgICB0cmFpbl9kYXRhc2V0ID0gRGF0YXNldC5mcm9tX3BhbmRhcyh0cmFpbl9kYXRhc2V0KQogICAgICAgIHRlc3RfZGF0YXNldCA9IERhdGFzZXQuZnJvbV9wYW5kYXModGVzdF9kYXRhc2V0KQogICAgZWxzZToKICAgICAgICByYWlzZSBtbHJ1bi5lcnJvcnMuTUxSdW5JbnZhbGlkQXJndW1lbnRFcnJvcigKICAgICAgICAgICAgIllvdSBoYXZlIHRvIHByb3ZpZGUgJ2hmX2RhdGFzZXQnIG9yICdkYXRhc2V0JyIKICAgICAgICApCgoKICAgICMgTWFwcGluZyBkYXRhc2V0cyB3aXRoIHRoZSB0b2tlbml6ZXI6CiAgICB0b2tlbml6ZWRfdHJhaW4gPSB0cmFpbl9kYXRhc2V0Lm1hcChwcmVwcm9jZXNzX2Z1bmN0aW9uLCBiYXRjaGVkPVRydWUpCiAgICB0b2tlbml6ZWRfdGVzdCA9IHRlc3RfZGF0YXNldC5tYXAocHJlcHJvY2Vzc19mdW5jdGlvbiwgYmF0Y2hlZD1UcnVlKQoKICAgICMgQ3JlYXRpbmcgZGF0YSBjb2xsYXRvciBmb3IgYmF0Y2hpbmc6CiAgICBkYXRhX2NvbGxhdG9yID0gRGF0YUNvbGxhdG9yV2l0aFBhZGRpbmcodG9rZW5pemVyPXRva2VuaXplcikKCiAgICAjIFBhcnNpbmcga3dhcmdzOgogICAgdHJhaW5fa3dhcmdzID0gX2dldF9zdWJfZGljdF9ieV9wcmVmaXgoCiAgICAgICAgc3JjPWNvbnRleHQucGFyYW1ldGVycywgcHJlZml4X2tleT1LV0FyZ3NQcmVmaXhlcy5UUkFJTgogICAgKQogICAgbW9kZWxfY2xhc3Nfa3dhcmdzID0gX2dldF9zdWJfZGljdF9ieV9wcmVmaXgoCiAgICAgICAgc3JjPWNvbnRleHQucGFyYW1ldGVycywgcHJlZml4X2tleT1LV0FyZ3NQcmVmaXhlcy5NT0RFTF9DTEFTUwogICAgKQoKICAgICMgTG9hZGluZyBvdXIgcHJldHJhaW5lZCBtb2RlbDoKICAgIG1vZGVsX2NsYXNzX2t3YXJnc1sicHJldHJhaW5lZF9tb2RlbF9uYW1lX29yX3BhdGgiXSA9ICgKICAgICAgICBtb2RlbF9jbGFzc19rd2FyZ3MuZ2V0KCJwcmV0cmFpbmVkX21vZGVsX25hbWVfb3JfcGF0aCIpIG9yIHByZXRyYWluZWRfbW9kZWwKICAgICkKICAgIG1vZGVsX2NsYXNzX2t3YXJnc1siaHViX3Rva2VuIl0gPSAoCiAgICAgICAgbW9kZWxfY2xhc3Nfa3dhcmdzLmdldCgiaHViX3Rva2VuIikgb3IgcHJldHJhaW5lZF90b2tlbml6ZXIKICAgICkKICAgIGlmIG5vdCBtb2RlbF9jbGFzc19rd2FyZ3NbInByZXRyYWluZWRfbW9kZWxfbmFtZV9vcl9wYXRoIl06CiAgICAgICAgcmFpc2UgbWxydW4uZXJyb3JzLk1MUnVuUnVudGltZUVycm9yKAogICAgICAgICAgICAiTXVzdCBwcm92aWRlIHByZXRyYWluZWRfbW9kZWwgbmFtZSBhcyAiCiAgICAgICAgICAgICJmdW5jdGlvbiBhcmd1bWVudCBvciBpbiBleHRyYSBwYXJhbXMiCiAgICAgICAgKQogICAgbW9kZWwgPSBjcmVhdGVfY2xhc3MobW9kZWxfY2xhc3MpLmZyb21fcHJldHJhaW5lZCgqKm1vZGVsX2NsYXNzX2t3YXJncykKCiAgICAjIFByZXBhcmluZyB0cmFpbmluZyBhcmd1bWVudHM6CiAgICB0cmFpbmluZ19hcmdzID0gVHJhaW5pbmdBcmd1bWVudHMoCiAgICAgICAgKip0cmFpbl9rd2FyZ3MsCiAgICApCgogICAgY29tcHV0ZV9tZXRyaWNzID0gX2NyZWF0ZV9jb21wdXRlX21ldHJpY3MobWV0cmljcykgaWYgbWV0cmljcyBlbHNlIE5vbmUKICAgIHRyYWluZXIgPSBUcmFpbmVyKAogICAgICAgIG1vZGVsPW1vZGVsLAogICAgICAgIGFyZ3M9dHJhaW5pbmdfYXJncywKICAgICAgICB0cmFpbl9kYXRhc2V0PXRva2VuaXplZF90cmFpbiwKICAgICAgICBldmFsX2RhdGFzZXQ9dG9rZW5pemVkX3Rlc3QsCiAgICAgICAgdG9rZW5pemVyPXRva2VuaXplciwKICAgICAgICBkYXRhX2NvbGxhdG9yPWRhdGFfY29sbGF0b3IsCiAgICAgICAgY29tcHV0ZV9tZXRyaWNzPWNvbXB1dGVfbWV0cmljcywKICAgICkKCiAgICBhcHBseV9tbHJ1bih0cmFpbmVyLCBtb2RlbF9uYW1lPW1vZGVsX25hbWUpCgogICAgIyBBcHBseSB0cmFpbmluZyB3aXRoIGV2YWx1YXRpb246CiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYidHJhaW5pbmcgJ3ttb2RlbF9uYW1lfSciKQogICAgdHJhaW5lci50cmFpbigpCgoKZGVmIF9nZXRfbW9kZWxfZGlyKG1vZGVsX3VyaTogc3RyKToKICAgIG1vZGVsX2ZpbGUsIF8sIF8gPSBtbHJ1bi5hcnRpZmFjdHMuZ2V0X21vZGVsKG1vZGVsX3VyaSkKICAgIG1vZGVsX2RpciA9IHRlbXBmaWxlLmdldHRlbXBkaXIoKQogICAgIyBVbnppcCB0aGUgTW9kZWw6CiAgICB3aXRoIHppcGZpbGUuWmlwRmlsZShtb2RlbF9maWxlLCAiciIpIGFzIHppcF9maWxlOgogICAgICAgIHppcF9maWxlLmV4dHJhY3RhbGwobW9kZWxfZGlyKQoKICAgIHJldHVybiBtb2RlbF9kaXIKCgpkZWYgb3B0aW1pemUoCiAgICBtb2RlbF9wYXRoOiBzdHIsCiAgICBtb2RlbF9uYW1lOiBzdHIgPSAib3B0aW1pemVkX21vZGVsIiwKICAgIHRhcmdldF9kaXI6IHN0ciA9ICIuL29wdGltaXplZCIsCiAgICBvcHRpbWl6YXRpb25fbGV2ZWw6IGludCA9IDEsCik6CiAgICAiIiIKICAgIE9wdGltaXppbmcgdGhlIHRyYW5zZm9ybWVyIG1vZGVsIHVzaW5nIE9OTlggb3B0aW1pemF0aW9uLgoKCiAgICA6cGFyYW0gbW9kZWxfcGF0aDogICAgICAgICAgVGhlIHBhdGggb2YgdGhlIG1vZGVsIHRvIG9wdGltaXplLgogICAgOnBhcmFtIG1vZGVsX25hbWU6ICAgICAgICAgIE5hbWUgb2YgdGhlIG9wdGltaXplZCBtb2RlbC4KICAgIDpwYXJhbSB0YXJnZXRfZGlyOiAgICAgICAgICBUaGUgZGlyZWN0b3J5IHRvIHNhdmUgdGhlIE9OTlggbW9kZWwuCiAgICA6cGFyYW0gb3B0aW1pemF0aW9uX2xldmVsOiAgT3B0aW1pemF0aW9uIGxldmVsIHBlcmZvcm1lZCBieSBPTk5YIFJ1bnRpbWUgb2YgdGhlIGxvYWRlZCBncmFwaC4gKGRlZmF1bHQgaXMgMSkKICAgICIiIgogICAgIyBXZSBpbXBvcnQgdGhlc2UgaW4gdGhlIGZ1bmN0aW9uIHNjb3BlIHNvIE9OTlggd29uJ3QgYmUgbWFuZGF0b3J5IGZvciB0aGUgb3RoZXIgaGFuZGxlcnM6CiAgICBmcm9tIG9wdGltdW0ub25ueHJ1bnRpbWUgaW1wb3J0IChPUlRNb2RlbEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUlRPcHRpbWl6ZXIpCiAgICBmcm9tIG9wdGltdW0ub25ueHJ1bnRpbWUuY29uZmlndXJhdGlvbiBpbXBvcnQgT3B0aW1pemF0aW9uQ29uZmlnCgogICAgbW9kZWxfZGlyID0gX2dldF9tb2RlbF9kaXIobW9kZWxfdXJpPW1vZGVsX3BhdGgpCiAgICAjIENyZWF0aW5nIGNvbmZpZ3VyYXRpb24gZm9yIG9wdGltaXphdGlvbiBzdGVwOgogICAgb3B0aW1pemF0aW9uX2NvbmZpZyA9IE9wdGltaXphdGlvbkNvbmZpZyhvcHRpbWl6YXRpb25fbGV2ZWw9b3B0aW1pemF0aW9uX2xldmVsKQoKICAgICMgQ29udmVydGluZyBvdXIgcHJldHJhaW5lZCBtb2RlbCB0byBhbiBPTk5YLVJ1bnRpbWUgbW9kZWw6CiAgICBvcnRfbW9kZWwgPSBPUlRNb2RlbEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24uZnJvbV9wcmV0cmFpbmVkKAogICAgICAgIG1vZGVsX2RpciwgZnJvbV90cmFuc2Zvcm1lcnM9VHJ1ZQogICAgKQoKICAgICMgQ3JlYXRpbmcgYW4gT05OWC1SdW50aW1lIG9wdGltaXplciBmcm9tIE9OTlggbW9kZWw6CiAgICBvcHRpbWl6ZXIgPSBPUlRPcHRpbWl6ZXIuZnJvbV9wcmV0cmFpbmVkKG9ydF9tb2RlbCkKCiAgICBhcHBseV9tbHJ1bihvcHRpbWl6ZXIsIG1vZGVsX25hbWU9bW9kZWxfbmFtZSkKICAgICMgT3B0aW1pemluZyBhbmQgc2F2aW5nIHRoZSBPTk5YIG1vZGVsOgogICAgb3B0aW1pemVyLm9wdGltaXplKHNhdmVfZGlyPXRhcmdldF9kaXIsIG9wdGltaXphdGlvbl9jb25maWc9b3B0aW1pemF0aW9uX2NvbmZpZykK
    commands:
    - python -m pip install onnx~=1.10.1 onnxruntime~=1.8.1 optimum~=1.6.4 transformers~=4.26.1
      datasets~=2.10.1 scikit-learn~=1.0.2
    code_origin: https://github.com/davesh0812/functions.git#d3eea28857c495f6e5f7668ff3dd05cbc66aa9b7:/Users/davids/Projects/functions/hugging_face_classifier_trainer/hugging_face_classifier_trainer.py
    origin_filename: /Users/davids/Projects/functions/hugging_face_classifier_trainer/hugging_face_classifier_trainer.py
  entry_points:
    add_interface:
      name: add_interface
      doc: 'Enrich the object with this interface properties, methods and functions,
        so it will have this TensorFlow.Keras

        MLRuns features.'
      parameters:
      - name: cls
        default: ''
      - name: obj
        type: Trainer
        doc: The object to enrich his interface.
        default: ''
      - name: restoration
        type: MLRunInterfaceRestorationType
        doc: Restoration information tuple as returned from 'remove_interface' in
          order to add the interface in a certain state.
        default: null
      outputs:
      - default: ''
      lineno: 136
    mlrun_optimize:
      name: mlrun_optimize
      doc: 'MLRun''s tf.keras.Model.fit wrapper. It will setup the optimizer when
        using horovod. The optimizer must be

        passed in a keyword argument and when using horovod, it must be passed as
        an Optimizer instance, not a string.


        raise MLRunInvalidArgumentError: In case the optimizer provided did not follow
        the instructions above.'
      parameters:
      - name: cls
        default: ''
      outputs:
      - default: ''
      lineno: 69
    wrapper:
      name: wrapper
      doc: ''
      parameters:
      - name: self
        type: Trainer
        default: ''
      outputs:
      - default: ''
      lineno: 164
    enable_auto_logging:
      name: enable_auto_logging
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: context
        type: MLClientCtx
        default: ''
      - name: model_name
        type: str
        default: model
      - name: tag
        type: str
        default: ''
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs:
      - default: ''
      lineno: 105
    mlrun_train:
      name: mlrun_train
      doc: 'MLRuns tf.keras.Model.fit wrapper. It will setup the optimizer when using
        horovod. The optimizer must be

        passed in a keyword argument and when using horovod, it must be passed as
        an Optimizer instance, not a string.


        raise MLRunInvalidArgumentError: In case the optimizer provided did not follow
        the instructions above.'
      parameters:
      - name: cls
        default: ''
      outputs:
      - default: ''
      lineno: 154
    on_epoch_begin:
      name: on_epoch_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 211
    on_epoch_end:
      name: on_epoch_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 220
    on_log:
      name: on_log
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: logs
        type: Dict[str, float]
        default: null
      outputs:
      - default: ''
      lineno: 229
    on_train_begin:
      name: on_train_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 253
    on_train_end:
      name: on_train_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: model
        type: PreTrainedModel
        default: null
      - name: tokenizer
        type: PreTrainedTokenizer
        default: null
      outputs:
      - default: ''
      lineno: 262
    on_evaluate:
      name: on_evaluate
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 313
    apply_mlrun:
      name: apply_mlrun
      doc: Wrap the given model with MLRun's interface providing it with mlrun's additional
        features.
      parameters:
      - name: huggingface_object
        doc: The model to wrap. Can be loaded from the model path given as well.
        default: ''
      - name: model_name
        type: str
        doc: 'The model name to use for storing the model artifact. Default: "model".'
        default: null
      - name: tag
        type: str
        doc: The model's tag to log with.
        default: ''
      - name: context
        type: MLClientCtx
        doc: MLRun context to work with. If no context is given it will be retrieved
          via 'mlrun.get_or_create_ctx(None)'
        default: null
      - name: auto_log
        type: bool
        doc: 'Whether to enable MLRun''s auto logging. Default: True.'
        default: true
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs:
      - default: ''
      lineno: 412
    train:
      name: train
      doc: 'Training and evaluating a pretrained model with a pretrained tokenizer
        over a dataset.

        The dataset can be either be the name of the dataset that contains in the
        HuggingFace hub,

        or a URI or a FeatureVector'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
        default: ''
      - name: hf_dataset
        type: str
        doc: The name of the dataset to get from the HuggingFace hub
        default: null
      - name: dataset
        type: DataItem
        doc: The dataset to train the model on. Can be either a URI or a FeatureVector
        default: null
      - name: drop_columns
        type: Optional[List[str]]
        doc: The columns to drop from the dataset.
        default: null
      - name: pretrained_tokenizer
        type: str
        doc: The name of the pretrained tokenizer from the HuggingFace hub.
        default: null
      - name: pretrained_model
        type: str
        doc: The name of the pretrained model from the HuggingFace hub.
        default: null
      - name: model_class
        type: str
        doc: The class of the model, e.g. `transformers.AutoModelForSequenceClassification`
        default: null
      - name: model_name
        type: str
        doc: The model's name to use for storing the model artifact, default to 'model'
        default: huggingface-model
      - name: label_name
        type: str
        doc: The target label of the column in the dataset.
        default: labels
      - name: text_col
        type: str
        doc: The input text column un the dataset.
        default: text
      - name: num_of_train_samples
        type: int
        doc: Max number of training samples, for debugging.
        default: null
      - name: train_test_split_size
        type: float
        doc: Should be between 0.0 and 1.0 and represent the proportion of the dataset
          to include in the test split.
        default: null
      - name: metrics
        type: List[str]
        doc: List of different metrics for evaluate the model such as f1, accuracy
          etc.
        default: null
      - name: random_state
        type: int
        doc: Random state for train_test_split
        default: null
      outputs:
      - default: ''
      lineno: 637
    preprocess_function:
      name: preprocess_function
      doc: ''
      parameters:
      - name: examples
        default: ''
      outputs:
      - default: ''
      lineno: 684
    optimize:
      name: optimize
      doc: Optimizing the transformer model using ONNX optimization.
      parameters:
      - name: model_path
        type: str
        doc: The path of the model to optimize.
        default: ''
      - name: model_name
        type: str
        doc: Name of the optimized model.
        default: optimized_model
      - name: target_dir
        type: str
        doc: The directory to save the ONNX model.
        default: ./optimized
      - name: optimization_level
        type: int
        doc: Optimization level performed by ONNX Runtime of the loaded graph. (default
          is 1)
        default: 1
      outputs:
      - default: ''
      lineno: 779
  description: Automatic train and optimize functions for Hugging Face frameworks
  default_handler: train
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
