kind: job
metadata:
  name: hugging-face-classifier-trainer
  tag: ''
  hash: c0ef7b5169af4ad2a0b0f73235e232d00caa8505
  project: ''
  labels:
    author: davids
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  build:
    functionSourceCode: 
    commands:
    - python -m pip install onnx~=1.10.1 onnxruntime~=1.8.1 optimum~=1.6.4 transformers~=4.26.1
      datasets~=2.10.1 scikit-learn~=1.0.2
    code_origin: https://github.com/davesh0812/functions.git#69d139b5c456bd1d29861d6513dc85041e8a03be:/Users/davids/Projects/functions/hugging_face_classifier_trainer/hugging_face_classifier_trainer.py
    origin_filename: /Users/davids/Projects/functions/hugging_face_classifier_trainer/hugging_face_classifier_trainer.py
  entry_points:
    add_interface:
      name: add_interface
      doc: 'Enrich the object with this interface properties, methods and functions,
        so it will have this TensorFlow.Keras

        MLRuns features.'
      parameters:
      - name: cls
        default: ''
      - name: obj
        type: Trainer
        doc: The object to enrich his interface.
        default: ''
      - name: restoration
        type: MLRunInterfaceRestorationType
        doc: Restoration information tuple as returned from 'remove_interface' in
          order to add the interface in a certain state.
        default: null
      outputs:
      - default: ''
      lineno: 136
    mlrun_optimize:
      name: mlrun_optimize
      doc: 'MLRun''s tf.keras.Model.fit wrapper. It will setup the optimizer when
        using horovod. The optimizer must be

        passed in a keyword argument and when using horovod, it must be passed as
        an Optimizer instance, not a string.


        raise MLRunInvalidArgumentError: In case the optimizer provided did not follow
        the instructions above.'
      parameters:
      - name: cls
        default: ''
      outputs:
      - default: ''
      lineno: 69
    wrapper:
      name: wrapper
      doc: ''
      parameters:
      - name: self
        type: Trainer
        default: ''
      outputs:
      - default: ''
      lineno: 164
    enable_auto_logging:
      name: enable_auto_logging
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: context
        type: MLClientCtx
        default: ''
      - name: model_name
        type: str
        default: model
      - name: tag
        type: str
        default: ''
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs:
      - default: ''
      lineno: 105
    mlrun_train:
      name: mlrun_train
      doc: 'MLRuns tf.keras.Model.fit wrapper. It will setup the optimizer when using
        horovod. The optimizer must be

        passed in a keyword argument and when using horovod, it must be passed as
        an Optimizer instance, not a string.


        raise MLRunInvalidArgumentError: In case the optimizer provided did not follow
        the instructions above.'
      parameters:
      - name: cls
        default: ''
      outputs:
      - default: ''
      lineno: 154
    on_epoch_begin:
      name: on_epoch_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 211
    on_epoch_end:
      name: on_epoch_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 220
    on_log:
      name: on_log
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: logs
        type: Dict[str, float]
        default: null
      outputs:
      - default: ''
      lineno: 229
    on_train_begin:
      name: on_train_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 253
    on_train_end:
      name: on_train_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: model
        type: PreTrainedModel
        default: null
      - name: tokenizer
        type: PreTrainedTokenizer
        default: null
      outputs:
      - default: ''
      lineno: 262
    on_evaluate:
      name: on_evaluate
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 313
    apply_mlrun:
      name: apply_mlrun
      doc: Wrap the given model with MLRun's interface providing it with mlrun's additional
        features.
      parameters:
      - name: huggingface_object
        doc: The model to wrap. Can be loaded from the model path given as well.
        default: ''
      - name: model_name
        type: str
        doc: 'The model name to use for storing the model artifact. Default: "model".'
        default: null
      - name: tag
        type: str
        doc: The model's tag to log with.
        default: ''
      - name: context
        type: MLClientCtx
        doc: MLRun context to work with. If no context is given it will be retrieved
          via 'mlrun.get_or_create_ctx(None)'
        default: null
      - name: auto_log
        type: bool
        doc: 'Whether to enable MLRun''s auto logging. Default: True.'
        default: true
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs:
      - default: ''
      lineno: 412
    train:
      name: train
      doc: 'Training and evaluating a pretrained model with a pretrained tokenizer
        over a dataset.

        The dataset can be either be the name of the dataset that contains in the
        HuggingFace hub,

        or a URI or a FeatureVector'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
        default: ''
      - name: hf_dataset
        type: str
        doc: The name of the dataset to get from the HuggingFace hub
        default: null
      - name: dataset
        type: DataItem
        doc: The dataset to train the model on. Can be either a URI or a FeatureVector
        default: null
      - name: drop_columns
        type: Optional[List[str]]
        doc: The columns to drop from the dataset.
        default: null
      - name: pretrained_tokenizer
        type: str
        doc: The name of the pretrained tokenizer from the HuggingFace hub.
        default: null
      - name: pretrained_model
        type: str
        doc: The name of the pretrained model from the HuggingFace hub.
        default: null
      - name: model_class
        type: str
        doc: The class of the model, e.g. `transformers.AutoModelForSequenceClassification`
        default: null
      - name: model_name
        type: str
        doc: The model's name to use for storing the model artifact, default to 'model'
        default: huggingface-model
      - name: label_name
        type: str
        doc: The target label of the column in the dataset.
        default: labels
      - name: text_col
        type: str
        doc: The input text column un the dataset.
        default: text
      - name: num_of_train_samples
        type: int
        doc: Max number of training samples, for debugging.
        default: null
      - name: train_test_split_size
        type: float
        doc: Should be between 0.0 and 1.0 and represent the proportion of the dataset
          to include in the test split.
        default: null
      - name: metrics
        type: List[str]
        doc: List of different metrics for evaluate the model such as f1, accuracy
          etc.
        default: null
      - name: random_state
        type: int
        doc: Random state for train_test_split
        default: null
      outputs:
      - default: ''
      lineno: 637
    preprocess_function:
      name: preprocess_function
      doc: ''
      parameters:
      - name: examples
        default: ''
      outputs:
      - default: ''
      lineno: 684
    optimize:
      name: optimize
      doc: Optimizing the transformer model using ONNX optimization.
      parameters:
      - name: model_path
        type: str
        doc: The path of the model to optimize.
        default: ''
      - name: model_name
        type: str
        doc: Name of the optimized model.
        default: optimized_model
      - name: target_dir
        type: str
        doc: The directory to save the ONNX model.
        default: ./optimized
      - name: optimization_level
        type: int
        doc: Optimization level performed by ONNX Runtime of the loaded graph. (default
          is 1)
        default: 1
      outputs:
      - default: ''
      lineno: 779
  description: Automatic train and optimize functions for Hugging Face frameworks
  default_handler: train
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
