kind: job
metadata:
  name: auto-trainer
  tag: ''
  hash: 70cbb211ef06fbeef3752dc5616afec4cbf13458
  project: ''
  labels:
    author: yonish
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: ''
    origin_filename: ''
    requirements: []
  entry_points:
    train:
      name: train
      doc: "Training a model with the given dataset.\n\nexample::\n\n    import mlrun\n\
        \    project = mlrun.get_or_create_project(\"my-project\")\n    project.set_function(\"\
        hub://auto_trainer\", \"train\")\n    trainer_run = project.run(\n       \
        \ name=\"train\",\n        handler=\"train\",\n        inputs={\"dataset\"\
        : \"./path/to/dataset.csv\"},\n        params={\n            \"model_class\"\
        : \"sklearn.linear_model.LogisticRegression\",\n            \"label_columns\"\
        : \"label\",\n            \"drop_columns\": \"id\",\n            \"model_name\"\
        : \"my-model\",\n            \"tag\": \"v1.0.0\",\n            \"sample_set\"\
        : \"./path/to/sample_set.csv\",\n            \"test_set\": \"./path/to/test_set.csv\"\
        ,\n            \"CLASS_solver\": \"liblinear\",\n        },\n    )"
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
      - name: dataset
        type: DataItem
        doc: The dataset to train the model on. Can be either a URI or a FeatureVector
      - name: model_class
        type: str
        doc: The class of the model, e.g. `sklearn.linear_model.LogisticRegression`
      - name: label_columns
        type: Optional[Union[str, List[str]]]
        doc: The target label(s) of the column(s) in the dataset. for Regression or
          Classification tasks. Mandatory when dataset is not a FeatureVector.
        default: null
      - name: drop_columns
        type: List[str]
        doc: str or a list of strings that represent the columns to drop
        default: null
      - name: model_name
        type: str
        doc: The model's name to use for storing the model artifact, default to 'model'
        default: model
      - name: tag
        type: str
        doc: The model's tag to log with
        default: ''
      - name: sample_set
        type: DataItem
        doc: A sample set of inputs for the model for logging its stats along the
          model in favour of model monitoring. Can be either a URI or a FeatureVector
        default: null
      - name: test_set
        type: DataItem
        doc: The test set to train the model with.
        default: null
      - name: train_test_split_size
        type: float
        doc: if test_set was provided then this argument is ignored. Should be between
          0.0 and 1.0 and represent the proportion of the dataset to include in the
          test split. The size of the Training set is set to the complement of this
          value. Default = 0.2
        default: null
      - name: random_state
        type: int
        doc: 'Relevant only when using train_test_split_size. A random state seed
          to shuffle the data. For more information, see: https://scikit-learn.org/stable/glossary.html#term-random_state
          Notice that here we only pass integer values.'
        default: null
      - name: labels
        type: dict
        doc: Labels to log with the model
        default: null
      outputs:
      - default: ''
      lineno: 116
    evaluate:
      name: evaluate
      doc: Evaluating a model. Artifacts generated by the MLHandler.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
      - name: model
        type: str
        doc: The model Store path.
      - name: dataset
        type: DataItem
        doc: The dataset to evaluate the model on. Can be either a URI or a FeatureVector.
      - name: drop_columns
        type: List[str]
        doc: str or a list of strings that represent the columns to drop.
        default: null
      - name: label_columns
        type: Optional[Union[str, List[str]]]
        doc: The target label(s) of the column(s) in the dataset. for Regression or
          Classification tasks. Mandatory when dataset is not a FeatureVector.
        default: null
      outputs:
      - default: ''
      lineno: 272
    predict:
      name: predict
      doc: Predicting dataset by a model.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
      - name: model
        type: str
        doc: The model Store path.
      - name: dataset
        type: DataItem
        doc: The dataset to predict the model on. Can be either a URI, a FeatureVector
          or a sample in a shape of a list/dict. When passing a sample, pass the dataset
          as a field in `params` instead of `inputs`.
      - name: drop_columns
        type: Union[str, List[str], int, List[int]]
        doc: str/int or a list of strings/ints that represent the column names/indices
          to drop. When the dataset is a list/dict this parameter should be represented
          by integers.
        default: null
      - name: label_columns
        type: Optional[Union[str, List[str]]]
        doc: The target label(s) of the column(s) in the dataset. for Regression or
          Classification tasks. Mandatory when dataset is not a FeatureVector.
        default: null
      - name: result_set
        type: Optional[str]
        doc: The db key to set name of the prediction result and the filename. Default
          to 'prediction'.
        default: null
      outputs:
      - default: ''
      lineno: 322
  description: Automatic train, evaluate and predict functions for the ML frameworks
    - Scikit-Learn, XGBoost and LightGBM.
  default_handler: train
  disable_auto_mount: false
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
