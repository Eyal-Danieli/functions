kind: job
metadata:
  name: batch-inference
  tag: ''
  hash: 0bb72d40d2180904f959f8759796ec37e78467bc
  project: ''
  labels:
    author: eyald
  categories:
  - Utils
  - Data Analysis
  - Monitoring
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/mlrun/functions.git#e6af791b6885fcf0dea3b1b9fd17bff028cfba26:/Users/Eyal_Danieli/PycharmProjects/functions/batch_inference/batch_inference.py
    origin_filename: /Users/Eyal_Danieli/PycharmProjects/functions/batch_inference/batch_inference.py
    with_mlrun: false
    auto_build: false
    requirements: []
  entry_points:
    infer:
      name: infer
      doc: 'Perform a prediction on a given dataset with the given model. Can perform
        drift analysis between the sample set

        statistics stored in the model to the current input data. The drift rule is
        the value per-feature mean of the TVD

        and Hellinger scores according to the thresholds configures here. When performing
        drift analysis, this function

        either creates or update an existing model endpoint record (depends on the
        provided `endpoint_id`).'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model_path
        type: str
        doc: The model Store path.
        default: ''
      - name: dataset
        type: DatasetType
        doc: The dataset to infer through the model. Can be passed in `inputs` as
          either a Dataset artifact / Feature vector URI. Or, in `parameters` as a
          list, dictionary or numpy array.
        default: ''
      - name: model_name
        type: str
        default: batch-inference-model
      - name: drop_columns
        type: Union[str, List[str], int, List[int]]
        doc: A string / integer or a list of strings / integers that represent the
          column names / indices to drop. When the dataset is a list or a numpy array
          this parameter must be represented by integers.
        default: null
      - name: label_columns
        type: Union[str, List[str]]
        doc: The target label(s) of the column(s) in the dataset for Regression or
          Classification tasks. The label column can be accessed from the model object,
          or the feature vector provided if available.
        default: null
      - name: log_result_set
        type: bool
        doc: Whether to log the result set - a DataFrame of the given inputs concatenated
          with the predictions. Defaulted to True.
        default: true
      - name: result_set_name
        type: str
        doc: The db key to set name of the prediction result and the filename. Defaulted
          to 'prediction'.
        default: prediction
      - name: batch_id
        type: str
        doc: The ID of the given batch (inference dataset). If `None`, it will be
          generated. Will be logged as a result of the run.
        default: null
      - name: perform_drift_analysis
        type: bool
        doc: Whether to perform drift analysis between the sample set of the model
          object to the dataset given. By default, None, which means it will perform
          drift analysis if the model has a sample set statistics. Performing drift
          analysis is equal to enable monitoring on the provided model endpoint. Please
          note that in order to trigger the drift analysis job, you need to set `trigger_monitoring_job=True`.
          Otherwise, the drift analysis will be triggered only as part the scheduled
          monitoring job (if exist in the current project) or if triggered manually
          by the user.
        default: null
      - name: sample_set
        type: DatasetType
        doc: A sample dataset to give to compare the inputs in the drift analysis.
          The default chosen sample set will always be the one who is set in the model
          artifact itself.
        default: null
      - name: drift_threshold
        type: float
        doc: The threshold of which to mark drifts. Defaulted to 0.7.
        default: 0.7
      - name: possible_drift_threshold
        type: float
        doc: The threshold of which to mark possible drifts. Defaulted to 0.5.
        default: 0.5
      - name: inf_capping
        type: float
        doc: The value to set for when it reached infinity. Defaulted to 10.0.
        default: 10.0
      - name: artifacts_tag
        type: str
        doc: Tag to use for all the artifacts resulted from the function.
        default: ''
      - name: endpoint_id
        type: str
        doc: Model endpoint unique ID. If perform_drift_analysis was set, the endpoint_id
          will be used either to update an existing model endpoint or generate a new
          model endpoint record.
        default: ''
      - name: trigger_monitoring_job
        type: bool
        doc: Whether to trigger the batch drift analysis after the infer job.
        default: false
      - name: batch_image_job
        type: str
        doc: The image that will be used for the monitoring batch job analysis. By
          default, the image is mlrun/mlrun.
        default: mlrun/mlrun
      outputs:
      - default: ''
      lineno: 78
  description: Batch inference (also knows as prediction) for the common ML frameworks
    (SciKit-Learn, XGBoost and LightGBM) while performing data drift analysis.
  default_handler: infer
  disable_auto_mount: false
  allow_empty_resources: true
  clone_target_dir: ''
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
