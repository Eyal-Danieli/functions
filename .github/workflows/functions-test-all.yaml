name: Test all functions, build marketplace

# This workflow contains the following jobs:
# 1. build_strategy_matrix: Triggered on push to the functions directory in the main branches. It creates a matrix of directories that were changed in the push.
# 2. check_matrix: Validates the matrix definition generated in the previous job.
# 3. run_monorepo_tests: Runs the tests on different packages, based on the build_strategy_matrix job output.
# 4. build-marketplace: Builds and prepares the marketplace docs and other files. It pushes the changes to a new branch in the marketplace repo and creates a pull request from that branch to the master branch.

# This workflow is triggered on push to the functions directory in the main branches
on:
  push:
    branches:
#      - development
#      - master
      - monorepo-design
#    paths:
#      - 'functions/**'

jobs:
  build_strategy_matrix:
    runs-on: ubuntu-latest
    steps:
      # Get the current branch name: extracts the current branch name from GitHub ref and set it as an output
      - name: Get the current branch name
        shell: bash
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: myref
      # Checkout (clone) the code into runner env
      - uses: actions/checkout@v4
      - id: set-matrix
        # Going to create directories matrix:
        # 1) First, we fetch the latest data from the current branch. Associate base_ref with origin/base_ref since actions/checkout doesn't do it, if we don't do that we won't be able to check the actual diff
        # 2) Build JSON string
        #  2.1) list all files in the current branch, excluding non-directory files that ends with 'cli'
        #  2.2) Clean the file name and leave us only with directories => sed 's,/*[^/]\+/*$,,'
        #  2.3) Sort and keep only unique directories => sort | uniq
        #  2.4) Remove directories starting with '.' => grep -v '^\.'
        #  2.5) Add quotation marks to all strings => sed 's/.*/"&"/'
        #  2.6) Add comma suffix to all strings excluding the last one => sed '$!s/.*/&,/'
        #  2.7) Close JSON
        # 3) Save matrix JSON to output using jq
        # The final result is a matrix in JSON format, representing the directories that were changed in the push.
        # This matrix will be stored as an output (matrix) for later steps.

        run: |
          git fetch --no-tags --prune --depth=1 origin +refs/heads/${{ steps.myref.outputs.branch }}:refs/remotes/origin/${{ steps.myref.outputs.branch }}
          matrix=$((
            echo '{ "package" : ['
            git ls-files *[^cli] | grep '/' | sort | uniq| sed 's,/*[^/]\+/*$,,' | sort | uniq | grep -v '^\.' | sed 's/.*/"&"/' | sed '$!s/.*/&,/'
            echo " ]}"
          ) | jq -c .)
          echo "::set-output name=matrix::$matrix"
    # Store the output matrix as an output of the build_strategy_matrix job
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  # The following job validates the matrix definition generated in the previous job
  # It's a debugging job that prints the matrix in different formats
  check_matrix:
    runs-on: ubuntu-latest
    needs: build_strategy_matrix
    steps:
      # Install json2yaml that will be used to convert the json matrix to yaml format
      - name: Install json2yaml
        run: |
          sudo npm install -g json2yaml
      # Convert the matrix to yaml format: Get the matrix from the previous job, print it, convert it to json and print it, and then convert it to yaml and print it
      - name: Check matrix definition
        run: |
          matrix='${{ needs.build_strategy_matrix.outputs.matrix }}'  
          echo $matrix
          echo $matrix | jq .
          echo $matrix | json2yaml

  # The following job runs the tests on different packages, based on the build_strategy_matrix job output
  run_monorepo_tests:
    needs: build_strategy_matrix
    runs-on: ubuntu-latest
    strategy:
      # the strategy for running the tests. It converts the output JSON matrix into an actual
      # matrix that will be used to define multiple test jobs.
      # matrix example: [{"package": some package that changed}, {...}, ...]
      matrix: ${{fromJson(needs.build_strategy_matrix.outputs.matrix)}}
    steps:
      # Checkout the code and place it in the functions directory
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          path: functions
      # Install python 3.9
      - name: Install python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      # Install dependencies - catch the python dependencies from the root requirements.txt to speed up future runs
      - uses: actions/cache@v3
        id: cache
        with:
          path: ~/.cache/pip
          # the key will be a combination of the operating system, the word 'pip', and the hash of the requirements.txt file
          # this way, if the requirements.txt file changes (or the os), the cache will need to be updated
          key: ${{ runner.os }}-pip-${{ hashFiles('functions/functions/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install the requirements (that were not installed in the cache) from the functions directory
      - name: Install requirements
        run: |
          echo "Listing all files in the current directory:"
          ls -la
          pip install --upgrade pip
          pip install -r functions/requirements.txt

      # Run python unit tests for each package in the matrix
      - name: Run py tests
        run: python functions/functions.py  run-tests -r functions -s py -fn ${{ matrix.package }}
        continue-on-error: true
#      - name: Run ipynb tests
#        run: python functions/functions.py  run-tests -r functions -s ipynb

      # Clean the functions directory
      - name: Clean
        run: |
          rm -rf functions

  # The following job builds and prepares the marketplace docs and other files
  # It pushes the changes to a new branch in the marketplace repo and creates a pull request from that branch to the master branch
  build-marketplace:
    name: Build marketplace
    # This job is triggered on push to the functions directory
    if: github.repository == 'mlrun/functions' && github.event_name != 'pull_request' && contains(github.event.head_commit.modified, 'functions/')
    runs-on: ubuntu-latest
    needs: run_monorepo_tests
    continue-on-error: false
    
    steps:
      #  Get the current branch name: extracts the current branch name from GitHub ref
      - name: Get the current branch name
        shell: bash
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"
        id: branch
      # Checkout the code and place it in a folder named functions
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          path: functions
      # Checkout mlrun/marketplace repo and place it in a folder named marketplace
      - name: Checkout Marketplace
        uses: actions/checkout@v4
        with:
          repository: mlrun/marketplace
          path: marketplace
      # Install python 3.9
      - name: Install python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9
      # Install python dependencies from the functions directory
      - name: Install requirements
        run: |
          cd functions/functions
          pip install --upgrade pip
          pip install -r requirements.txt
      # Build the marketplace documentation
#      - name: Build marketplace docs
#      # Set the branch name as an environment variable
#        env:
#          CHANNEL: ${{ steps.branch.outputs.branch }}
#      # pull the latest changes from the marketplace repo, run the build-marketplace script from the functions repo
#        run: |
#          cd marketplace
#          pwd
#          git pull origin
#          cd ..
#          python functions/functions/functions.py build-marketplace -s functions -m marketplace -c $CHANNEL -v -f
#      # Publish the marketplace release - push the changes to the marketplace repo
#      - name: Publish marketplace release
#        env:
#          GITHUB_TOKEN: ${{ secrets.MARKETPLACE_ACCESS_TOKEN_V3 }}
#          USERNAME: iguazio-cicd
#          USEREMAIL: iguaziocicd@gmail.com
#          REPO_PATH: marketplace
#          BASE_REPO: mlrun
#          BASE_BRANCH: master
#        # The following script do the followings:
#        # 1. checkout the marketplace directory
#        # 2. generate a commit SHA and save the changes into a variable named `COMMIT_SHA`
#        # 3. generate a branch name based on the commit SHA - marketplace-doc-gen-$COMMIT_SHA
#        # 4. merge base branch (master) into the new branch
#        # 5. add all the changes to the new branch, and a commit is made with a message that includes the commit SHA
#        # 6. push the changes to the marketplace repo
#        # 7. create a pull request from the new branch to the base branch
#        run: |
#          cd marketplace
#          pwd
#          COMMIT_SHA=$(git rev-parse --short "$GITHUB_SHA")
#          echo "commit sha: $COMMIT_SHA"
#          echo "github sha: $GITHUB_SHA"
#          BRANCH_NAME=marketplace-doc-gen-$COMMIT_SHA
#          REMOTE=https://$USERNAME:$GITHUB_TOKEN@github.com/$BASE_REPO/$REPO_PATH.git
#          echo "Validating environment params...";
#          [ -z "${GITHUB_TOKEN}" ] && {
#              echo 'Missing input "GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}".';
#              exit 1;
#          };
#          git config --local user.name $USERNAME
#          git config --local user.email $USEREMAIL
#          git branch --set-upstream-to origin/master
#          git remote -v
#          echo "1. Checking out [$BRANCH_NAME]..."
#          git checkout -b $BRANCH_NAME
#          echo "2. Checking out [$BASE_BRANCH]..."
#          git checkout $BASE_BRANCH
#          git pull
#          echo "3. Checking out [$BRANCH_NAME]..."
#          git checkout $BRANCH_NAME
#          echo "3a. merging"
#          git merge $BASE_BRANCH
#          echo "3b. status"
#          git status
#          git status --ignored
#          find . -type f | xargs ls -artl
#          echo "3b. add"
#          git add --all
#          git status
#          git status --ignored
#          echo "4. Commiting changes..."
#          echo "4a. git rev-parse"
#          git rev-parse --show-toplevel
#          echo "4b. git commit"
#          git commit -a -m "Automatically generated by github-worflow[bot] for commit: $COMMIT_SHA"
#          git status
#          git status --ignored
#          # https://stackoverflow.com/questions/64270867/auth-error-trying-to-copy-a-repo-with-github-actions
#          git config -l | grep 'http\..*\.extraheader' | cut -d= -f1 | xargs -L1 git config --unset-all
#          echo "Pushing [$BRANCH_NAME] to remote [$REMOTE]"
#          git push -f $REMOTE $BRANCH_NAME
#          echo "Submiting pull request..."
#          gh pr create --title "Marketplace update from $BRANCH_NAME" --body "github-workflow" --base $BASE_BRANCH --head $BRANCH_NAME --repo $BASE_REPO/$REPO_PATH
