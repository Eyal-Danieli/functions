kind: job
metadata:
  name: speaker-diarization
  tag: ''
  hash: 0cbf8006c28b7814298b16e8de3254d869b69199
  project: ''
  labels:
    author: pgw
  categories:
  - data-preparation
  - machine-learning
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands:
    - python -m pip install tqdm librora Cython Cmake 'pyannote.core[notebook]' torch
      torchaudio pydub 'nemo_toolkit[all]'
    code_origin: git@github.com-personal:pengwei715/functions.git#0fb3569e10c813297f7873521cf1b5cfd14f6250:/Users/Peng_Wei/work/mlrun_related/functions/speaker_diarization/speaker_diarization.py
    origin_filename: /Users/Peng_Wei/work/mlrun_related/functions/speaker_diarization/speaker_diarization.py
  entry_points:
    diarize:
      name: diarize
      doc: 'Diarize audio files into speaker segments

        The final result is a directory containing the diarization results in the
        form csv files, a dataframe that has the mapping with the audio file to the
        csv files

        and a plot of the diarization results if condition_show_plot is set to True.
        The dataframe (csv) will have the following columns:


        * start: Start time of the speaker segment

        * end: End time of the speaker segment

        * speaker: Speaker label


        The pandas dataframe will have the following format:


        * original_audio_file: Path to the original audio file

        * result of model: directory of the diarization results

        * converted_audio_file: Path to the converted audio file

        * speaker_segments: Path to the dataitem that has the speaker labels, start,
        end'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
        default: ''
      - name: input_path
        type: str
        doc: A directory of the audio files or a single file to diarize
        default: ''
      - name: output_dir
        type: str
        doc: Path to the output directory this is where nemo will store the diarization
          results
        default: ''
      - name: condition_show_plot
        type: bool
        doc: If set to True, the diarization results will be plotted
        default: false
      - name: num_speakers
        type: int
        doc: Number of speakers in the audio file
        default: 2
      - name: vad_model
        type: str
        doc: Name of the VAD model to use
        default: vad_multilingual_marblenet
      - name: speaker_embeddings_model
        type: str
        doc: Name of the speaker embeddings model to use
        default: titanet_large
      - name: msdd_model
        type: str
        doc: Name of the msdd model to use
        default: diar_msdd_telephonic
      - name: device
        type: Optional[str]
        doc: Device to use for diarization (default cuda if cuda available, else cpu)
        default: null
      outputs:
      - default: ''
        doc: 'A tuple of: * Path to the diarization results (pandas dataframe) * A
          dictionary of errored files that were not diarized'
      lineno: 451
  description: speaker diarization on the audio file
  default_handler: diarize
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
