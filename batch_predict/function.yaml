kind: job
metadata:
  name: batch-predict
  tag: ''
  hash: a1d07ab6f7cae73cc4d15849d8a71ada03d80b4f
  project: ''
  labels:
    author: guyl
  categories:
  - utils
spec:
  command: ''
  args: []
  image: ''
  build:
    functionSourceCode: IyBDb3B5cmlnaHQgMjAxOSBJZ3VhemlvCiMKIyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKIyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiMgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiMKaW1wb3J0IGpzb24KZnJvbSB0eXBpbmcgaW1wb3J0IEFueSwgRGljdCwgTGlzdCwgVHVwbGUsIFVuaW9uCgppbXBvcnQgbWxydW4KaW1wb3J0IG51bXB5IGFzIG5wCmltcG9ydCBwYW5kYXMgYXMgcGQKZnJvbSBtbHJ1biBpbXBvcnQgZmVhdHVyZV9zdG9yZSBhcyBmcwpmcm9tIG1scnVuLmFwaS5zY2hlbWFzIGltcG9ydCBPYmplY3RLaW5kCmZyb20gbWxydW4uYXJ0aWZhY3RzIGltcG9ydCBBcnRpZmFjdApmcm9tIG1scnVuLmRhdGFfdHlwZXMuaW5mZXIgaW1wb3J0IEluZmVyT3B0aW9ucywgZ2V0X2RmX3N0YXRzCmZyb20gbWxydW4uZnJhbWV3b3Jrcy5hdXRvX21scnVuIGltcG9ydCBBdXRvTUxSdW4KZnJvbSBtbHJ1bi5tb2RlbF9tb25pdG9yaW5nLmZlYXR1cmVzX2RyaWZ0X3RhYmxlIGltcG9ydCBGZWF0dXJlc0RyaWZ0VGFibGVQbG90CmZyb20gbWxydW4ubW9kZWxfbW9uaXRvcmluZy5tb2RlbF9tb25pdG9yaW5nX2JhdGNoIGltcG9ydCAoCiAgICBWaXJ0dWFsRHJpZnQsCiAgICBjYWxjdWxhdGVfaW5wdXRzX3N0YXRpc3RpY3MsCikKCkRhdGFzZXRUeXBlID0gVW5pb25bbWxydW4uRGF0YUl0ZW0sIGxpc3QsIGRpY3QsIHBkLkRhdGFGcmFtZSwgcGQuU2VyaWVzLCBucC5uZGFycmF5XQoKCmRlZiBfcmVhZF9kYXRhc2V0X2FzX2RhdGFmcmFtZSgKICAgIGRhdGFzZXQ6IERhdGFzZXRUeXBlLAogICAgbGFiZWxfY29sdW1uczogVW5pb25bc3RyLCBMaXN0W3N0cl1dID0gTm9uZSwKICAgIGRyb3BfY29sdW1uczogVW5pb25bc3RyLCBMaXN0W3N0cl0sIGludCwgTGlzdFtpbnRdXSA9IE5vbmUsCikgLT4gVHVwbGVbcGQuRGF0YUZyYW1lLCBMaXN0W3N0cl1dOgogICAgIiIiCiAgICBQYXJzZSB0aGUgZ2l2ZW4gZGF0YXNldCBpbnRvIGEgRGF0YUZyYW1lIGFuZCBkcm9wIHRoZSBjb2x1bW5zIGFjY29yZGluZ2x5LiBJbiBhZGRpdGlvbiwgdGhlIGxhYmVsIGNvbHVtbnMgd2lsbCBiZQogICAgcGFyc2VkIGFuZCB2YWxpZGF0ZWQgYXMgd2VsbC4KCiAgICA6cGFyYW0gZGF0YXNldDogICAgICAgVGhlIGRhdGFzZXQgdG8gdHJhaW4gdGhlIG1vZGVsIG9uLgogICAgICAgICAgICAgICAgICAgICAgICAgIENhbiBiZSBlaXRoZXIgYSBsaXN0IG9mIGxpc3RzLCBkaWN0LCBVUkkgb3IgYSBGZWF0dXJlVmVjdG9yLgogICAgOnBhcmFtIGxhYmVsX2NvbHVtbnM6IFRoZSB0YXJnZXQgbGFiZWwocykgb2YgdGhlIGNvbHVtbihzKSBpbiB0aGUgZGF0YXNldC4gZm9yIFJlZ3Jlc3Npb24gb3IKICAgICAgICAgICAgICAgICAgICAgICAgICBDbGFzc2lmaWNhdGlvbiB0YXNrcy4KICAgIDpwYXJhbSBkcm9wX2NvbHVtbnM6ICBgYHN0cmBgIC8gYGBpbnRgYCBvciBhIGxpc3Qgb2YgYGBzdHJgYCAvIGBgaW50YGAgdGhhdCByZXByZXNlbnQgdGhlIGNvbHVtbiBuYW1lcyAvIGluZGljZXMgdG8KICAgICAgICAgICAgICAgICAgICAgICAgICBkcm9wLgoKICAgIDpyZXR1cm5zOiBBIHR1cGxlIG9mOgogICAgICAgICAgICAgIFswXSA9IFRoZSBwYXJzZWQgZGF0YXNldCBhcyBhIERhdGFGcmFtZQogICAgICAgICAgICAgIFsxXSA9IExhYmVsIGNvbHVtbnMuCgogICAgcmFpc2VzIE1MUnVuSW52YWxpZEFyZ3VtZW50RXJyb3I6IElmIHRoZSBgZHJvcF9jb2x1bW5zYCBhcmUgbm90IG1hdGNoaW5nIHRoZSBkYXRhc2V0IG9yIHVuc3VwcG9ydGVkIGRhdGFzZXQgdHlwZS4KICAgICIiIgogICAgIyBUdXJuIHRoZSBgZHJvcCBsYWJlbHNgIGludG8gYSBsaXN0IGlmIGdpdmVuOgogICAgaWYgZHJvcF9jb2x1bW5zIGlzIG5vdCBOb25lOgogICAgICAgIGlmIG5vdCBpc2luc3RhbmNlKGRyb3BfY29sdW1ucywgbGlzdCk6CiAgICAgICAgICAgIGRyb3BfY29sdW1ucyA9IFtkcm9wX2NvbHVtbnNdCgogICAgIyBDaGVjayBpZiB0aGUgZGF0YXNldCBpcyBpbiBmYWN0IGEgRmVhdHVyZSBWZWN0b3I6CiAgICBpZiBkYXRhc2V0Lm1ldGEgYW5kIGRhdGFzZXQubWV0YS5raW5kID09IE9iamVjdEtpbmQuZmVhdHVyZV92ZWN0b3I6CiAgICAgICAgIyBUcnkgdG8gZ2V0IHRoZSBsYWJlbCBjb2x1bW5zIGlmIG5vdCBwcm92aWRlZDoKICAgICAgICBsYWJlbF9jb2x1bW5zID0gbGFiZWxfY29sdW1ucyBvciBkYXRhc2V0Lm1ldGEuc3RhdHVzLmxhYmVsX2NvbHVtbgogICAgICAgICMgR2V0IHRoZSBmZWF0dXJlcyBhbmQgcGFyc2UgdG8gRGF0YUZyYW1lOgogICAgICAgIGRhdGFzZXQgPSBmcy5nZXRfb2ZmbGluZV9mZWF0dXJlcygKICAgICAgICAgICAgZGF0YXNldC5tZXRhLnVyaSwgZHJvcF9jb2x1bW5zPWRyb3BfY29sdW1ucwogICAgICAgICkudG9fZGF0YWZyYW1lKCkKICAgIGVsc2U6CiAgICAgICAgIyBQYXJzZSB0byBEYXRhRnJhbWUgYWNjb3JkaW5nIHRvIHRoZSBkYXRhc2V0J3MgdHlwZToKICAgICAgICBpZiBpc2luc3RhbmNlKGRhdGFzZXQsIChsaXN0LCBucC5uZGFycmF5KSk6CiAgICAgICAgICAgICMgUGFyc2UgdGhlIGxpc3QgLyBudW1weSBhcnJheSBpbnRvIGEgRGF0YUZyYW1lOgogICAgICAgICAgICBkYXRhc2V0ID0gcGQuRGF0YUZyYW1lKGRhdGFzZXQpCiAgICAgICAgICAgICMgVmFsaWRhdGUgdGhlIGBkcm9wX2NvbHVtbnNgIGlzIGdpdmVuIGFzIGludGVnZXJzOgogICAgICAgICAgICBpZiBkcm9wX2NvbHVtbnMgYW5kIG5vdCBhbGwoaXNpbnN0YW5jZShjb2wsIGludCkgZm9yIGNvbCBpbiBkcm9wX2NvbHVtbnMpOgogICAgICAgICAgICAgICAgcmFpc2UgbWxydW4uZXJyb3JzLk1MUnVuSW52YWxpZEFyZ3VtZW50RXJyb3IoCiAgICAgICAgICAgICAgICAgICAgImBkcm9wX2NvbHVtbnNgIG11c3QgYmUgYW4gaW50ZWdlciAvIGxpc3Qgb2YgaW50ZWdlcnMgaWYgcHJvdmlkZWQgYXMgYSBsaXN0LiIKICAgICAgICAgICAgICAgICkKICAgICAgICBlbGlmIGlzaW5zdGFuY2UoZGF0YXNldCwgbWxydW4uRGF0YUl0ZW0pOgogICAgICAgICAgICAjIFR1cm4gdGhlIERhdGFJVGVtIHRvIERhdGFGcmFtZToKICAgICAgICAgICAgZGF0YXNldCA9IGRhdGFzZXQuYXNfZGYoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgICMgUGFyc2UgdGhlIG9iamVjdCAoc2hvdWxkIGJlIGEgcGQuRGF0YUZyYW1lIC8gcGQuU2VyaWVzLCBkaWN0aW9uYXJ5KSBpbnRvIGEgRGF0YUZyYW1lOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBkYXRhc2V0ID0gcGQuRGF0YUZyYW1lKGRhdGFzZXQpCiAgICAgICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yIGFzIGU6CiAgICAgICAgICAgICAgICByYWlzZSBtbHJ1bi5lcnJvcnMuTUxSdW5JbnZhbGlkQXJndW1lbnRFcnJvcigKICAgICAgICAgICAgICAgICAgICBmIkNvdWxkIG5vdCBwYXJzZSB0aGUgZ2l2ZW4gZGF0YXNldCBvZiB0eXBlIHt0eXBlKGRhdGFzZXQpfSBpbnRvIGEgcGFuZGFzIERhdGFGcmFtZS4gIgogICAgICAgICAgICAgICAgICAgIGYiUmVjZWl2ZWQgdGhlIGZvbGxvd2luZyBlcnJvcjoge2V9IgogICAgICAgICAgICAgICAgKQogICAgICAgICMgRHJvcCBjb2x1bW5zIGlmIG5lZWRlZDoKICAgICAgICBpZiBkcm9wX2NvbHVtbnM6CiAgICAgICAgICAgIGRhdGFzZXQuZHJvcChkcm9wX2NvbHVtbnMsIGF4aXM9MSwgaW5wbGFjZT1UcnVlKQoKICAgICMgVHVybiB0aGUgYGxhYmVsX2NvbHVtbnNgIGludG8gYSBsaXN0IGJ5IGRlZmF1bHQ6CiAgICBpZiBsYWJlbF9jb2x1bW5zIGlzIE5vbmU6CiAgICAgICAgbGFiZWxfY29sdW1ucyA9IFtdCiAgICBlbGlmIGlzaW5zdGFuY2UobGFiZWxfY29sdW1ucywgKHN0ciwgaW50KSk6CiAgICAgICAgbGFiZWxfY29sdW1ucyA9IFtsYWJlbF9jb2x1bW5zXQoKICAgIHJldHVybiBkYXRhc2V0LCBsYWJlbF9jb2x1bW5zCgoKZGVmIF9wcmVwYXJlX3Jlc3VsdF9zZXQoCiAgICB4OiBwZC5EYXRhRnJhbWUsIGxhYmVsX2NvbHVtbnM6IExpc3Rbc3RyXSwgeV9wcmVkOiBucC5uZGFycmF5CikgLT4gcGQuRGF0YUZyYW1lOgogICAgIiIiCiAgICBTZXQgZGVmYXVsdCBsYWJlbCBjb2x1bW4gbmFtZXMgYW5kIHZhbGlkYXRlIGdpdmVuIG5hbWVzIHRvIHByZXBhcmUgdGhlIHJlc3VsdCBzZXQgLSBhIGNvbmNhdGVuYXRpb24gb2YgdGhlIGlucHV0cwogICAgKHgpIGFuZCB0aGUgbW9kZWwgcHJlZGljdGlvbnMgKHlfcHJlZCkuCgogICAgOnBhcmFtIHg6ICAgICAgICAgICAgIFRoZSBpbnB1dHMuCiAgICA6cGFyYW0gbGFiZWxfY29sdW1uczogQSBsaXN0IG9mIHN0cmluZ3MgcmVwcmVzZW50aW5nIHRoZSB0YXJnZXQgY29sdW1uIG5hbWVzIHRvIGFkZCB0byB0aGUgcHJlZGljdGlvbnMuIERlZmF1bHQgbmFtZQogICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgdXNlZCBpbiBjYXNlIHRoZSBsaXN0IGlzIGVtcHR5IChwcmVkaWN0ZWRfbGFiZWxfe2l9KS4KICAgIDpwYXJhbSB5X3ByZWQ6ICAgICAgICBUaGUgbW9kZWwgcHJlZGljdGlvbnMgb24gdGhlIGlucHV0cy4KCiAgICA6cmV0dXJuczogVGhlIHJlc3VsdCBzZXQuCgogICAgcmFpc2VzIE1MUnVuSW52YWxpZEFyZ3VtZW50RXJyb3I6IElmIHRoZSBsYWJlbHMgY29sdW1ucyBhbW91bnQgZG8gbm90IG1hdGNoIHRoZSBvdXRwdXRzIG9yIGlmIG9uZSBvZiB0aGUgbGFiZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1uIGFscmVhZHkgZXhpc3RzIGluIHRoZSBkYXRhc2V0LgogICAgIiIiCiAgICAjIFByZXBhcmUgZGVmYXVsdCB0YXJnZXQgY29sdW1ucyBuYW1lcyBpZiBub3QgcHJvdmlkZWQ6CiAgICBwcmVkaWN0aW9uX2NvbHVtbnNfYW1vdW50ID0gMSBpZiBsZW4oeV9wcmVkLnNoYXBlKSA9PSAxIGVsc2UgeV9wcmVkLnNoYXBlWzFdCiAgICBpZiBsZW4obGFiZWxfY29sdW1ucykgPT0gMDoKICAgICAgICAjIEFkZCBkZWZhdWx0IGxhYmVsIGNvbHVtbiBuYW1lczoKICAgICAgICBpZiBwcmVkaWN0aW9uX2NvbHVtbnNfYW1vdW50ID09IDE6CiAgICAgICAgICAgIGxhYmVsX2NvbHVtbnMgPSBbInByZWRpY3RlZF9sYWJlbCJdCiAgICAgICAgZWxzZToKICAgICAgICAgICAgbGFiZWxfY29sdW1ucyA9IFsKICAgICAgICAgICAgICAgIGYicHJlZGljdGVkX2xhYmVsX3tpfSIgZm9yIGkgaW4gcmFuZ2UocHJlZGljdGlvbl9jb2x1bW5zX2Ftb3VudCkKICAgICAgICAgICAgXQoKICAgICMgVmFsaWRhdGUgdGhlIGxhYmVsIGNvbHVtbnM6CiAgICBpZiBwcmVkaWN0aW9uX2NvbHVtbnNfYW1vdW50ICE9IGxlbihsYWJlbF9jb2x1bW5zKToKICAgICAgICAjIE5vIGVxdWFsaXR5IGJldHdlZW4gcHJvdmlkZWQgbGFiZWwgY29sdW1uIG5hbWVzIGFuZCBvdXRwdXRzIGFtb3VudDoKICAgICAgICByYWlzZSBtbHJ1bi5lcnJvcnMuTUxSdW5JbnZhbGlkQXJndW1lbnRFcnJvcigKICAgICAgICAgICAgZiJUaGUgbnVtYmVyIG9mIHByZWRpY3RlZCBsYWJlbHM6IHtwcmVkaWN0aW9uX2NvbHVtbnNfYW1vdW50fSAiCiAgICAgICAgICAgIGYiaXMgbm90IGVxdWFsIHRvIHRoZSBnaXZlbiBsYWJlbCBjb2x1bW5zOiB7bGVuKGxhYmVsX2NvbHVtbnMpfSIKICAgICAgICApCiAgICBjb21tb25fbGFiZWxzID0gc2V0KGxhYmVsX2NvbHVtbnMpICYgc2V0KHguY29sdW1ucy50b2xpc3QoKSkKICAgIGlmIGNvbW1vbl9sYWJlbHM6CiAgICAgICAgIyBMYWJlbCBjb2x1bW4gZXhpc3QgaW4gdGhlIG9yaWdpbmFsIGlucHV0czoKICAgICAgICByYWlzZSBtbHJ1bi5lcnJvcnMuTUxSdW5JbnZhbGlkQXJndW1lbnRFcnJvcigKICAgICAgICAgICAgZiJUaGUgbGFiZWxzOiB7Y29tbW9uX2xhYmVsc30gYXJlIGFscmVhZHkgZXhpc3RlZCBpbiB0aGUgZ2l2ZW4gZGF0YXNldC4iCiAgICAgICAgKQoKICAgIHJldHVybiBwZC5jb25jYXQoW3gsIHBkLkRhdGFGcmFtZSh5X3ByZWQsIGNvbHVtbnM9bGFiZWxfY29sdW1ucyldLCBheGlzPTEpCgoKZGVmIF9nZXRfc2FtcGxlX3NldF9zdGF0aXN0aWNzKAogICAgc2FtcGxlX3NldDogRGF0YXNldFR5cGUgPSBOb25lLCBtb2RlbF9hcnRpZmFjdF9mZWF0dXJlX3N0YXRzOiBkaWN0ID0gTm9uZQopIC0+IGRpY3Q6CiAgICAiIiIKICAgIEdldCB0aGUgc2FtcGxlIHNldCBzdGF0aXN0aWNzIGVpdGhlciBmcm9tIHRoZSBnaXZlbiBzYW1wbGUgc2V0IG9yIHRoZSBzdGF0aXN0aWNzIGxvZ2dlZCB3aXRoIHRoZSBtb2RlbCB3aGlsZQogICAgZmF2b3JpbmcgdGhlIGdpdmVuIHNhbXBsZSBzZXQuCgogICAgOnBhcmFtIHNhbXBsZV9zZXQ6ICAgICAgICAgICAgICAgICAgIEEgc2FtcGxlIGRhdGFzZXQgdG8gZ2l2ZSB0byBjb21wYXJlIHRoZSBpbnB1dHMgaW4gdGhlIGRyaWZ0IGFuYWx5c2lzLgogICAgOnBhcmFtIG1vZGVsX2FydGlmYWN0X2ZlYXR1cmVfc3RhdHM6IFRoZSBgZmVhdHVyZV9zdGF0c2AgYXR0cmlidXRlIGluIHRoZSBzcGVjIG9mIHRoZSBtb2RlbCBhcnRpZmFjdCwgd2hlcmUgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWwgc2FtcGxlIHNldCBzdGF0aXN0aWNzIG9mIHRoZSBtb2RlbCB3YXMgdXNlZC4KCiAgICA6cmV0dXJuczogVGhlIHNhbXBsZSBzZXQgc3RhdGlzdGljcy4KCiAgICByYWlzZXMgTUxSdW5JbnZhbGlkQXJndW1lbnRFcnJvcjogSWYgbm8gc2FtcGxlIHNldCBvciBzdGF0aXN0aWNzIHdlcmUgZ2l2ZW4uCiAgICAiIiIKICAgICMgQ2hlY2sgaWYgYSBzYW1wbGUgc2V0IHdhcyBwcm92aWRlZDoKICAgIGlmIHNhbXBsZV9zZXQgaXMgTm9uZToKICAgICAgICAjIENoZWNrIGlmIHRoZSBtb2RlbCB3YXMgbG9nZ2VkIHdpdGggYSBzYW1wbGUgc2V0OgogICAgICAgIGlmIG1vZGVsX2FydGlmYWN0X2ZlYXR1cmVfc3RhdHMgaXMgTm9uZToKICAgICAgICAgICAgcmFpc2UgbWxydW4uZXJyb3JzLk1MUnVuSW52YWxpZEFyZ3VtZW50RXJyb3IoCiAgICAgICAgICAgICAgICAiQ2Fubm90IHBlcmZvcm0gZHJpZnQgYW5hbHlzaXMgYXMgdGhlcmUgaXMgbm8gc2FtcGxlIHNldCB0byBjb21wYXJlIHRvLiBUaGUgbW9kZWwgYXJ0aWZhY3Qgd2FzIG5vdCAiCiAgICAgICAgICAgICAgICAibG9nZ2VkIHdpdGggYSBzYW1wbGUgc2V0IGFuZCBgc2FtcGxlX3NldGAgd2FzIG5vdCBwcm92aWRlZCB0byB0aGUgZnVuY3Rpb24uIgogICAgICAgICAgICApCiAgICAgICAgIyBSZXR1cm4gdGhlIHN0YXRpc3RpY3MgbG9nZ2VkIHdpdGggdGhlIG1vZGVsOgogICAgICAgIHJldHVybiBtb2RlbF9hcnRpZmFjdF9mZWF0dXJlX3N0YXRzCgogICAgIyBSZXR1cm4gdGhlIHNhbXBsZSBzZXQgc3RhdGlzdGljczoKICAgIHJldHVybiBnZXRfZGZfc3RhdHMoZGY9c2FtcGxlX3NldCwgb3B0aW9ucz1JbmZlck9wdGlvbnMuSGlzdG9ncmFtKQoKCmRlZiBfZ2V0X2RyaWZ0X3Jlc3VsdCgKICAgIHR2ZDogZmxvYXQsCiAgICBoZWxsaW5nZXI6IGZsb2F0LAogICAgdGhyZXNob2xkOiBmbG9hdCwKKSAtPiBUdXBsZVtib29sLCBmbG9hdF06CiAgICAiIiIKICAgIENhbGN1bGF0ZSB0aGUgZHJpZnQgcmVzdWx0IGJ5IHRoZSBmb2xsb3dpbmcgZXF1YXRpb246ICh0dmQgKyBoZWxsaW5nZXIpIC8gMgoKICAgIDpwYXJhbSB0dmQ6ICAgICAgIFRoZSBmZWF0dXJlJ3MgVFZEIHZhbHVlLgogICAgOnBhcmFtIGhlbGxpbmdlcjogVGhlIGZlYXR1cmUncyBIZWxsaW5nZXIgdmFsdWUuCiAgICA6cGFyYW0gdGhyZXNob2xkOiBUaGUgdGhyZXNob2xkIGZyb20gd2hpY2ggdGhlIHZhbHVlIGlzIGNvbnNpZGVyZWQgYSBkcmlmdC4KCiAgICA6cmV0dXJuczogQSB0dXBsZSBvZjoKICAgICAgICAgICAgICBbMF0gPSBCb29sZWFuIHZhbHVlIGFzIHRoZSBkcmlmdCBzdGF0dXMuCiAgICAgICAgICAgICAgWzFdID0gVGhlIHJlc3VsdC4KICAgICIiIgogICAgcmVzdWx0ID0gKHR2ZCArIGhlbGxpbmdlcikgLyAyCiAgICBpZiByZXN1bHQgPj0gdGhyZXNob2xkOgogICAgICAgIHJldHVybiBUcnVlLCByZXN1bHQKICAgIHJldHVybiBGYWxzZSwgcmVzdWx0CgoKZGVmIF9wZXJmb3JtX2RyaWZ0X2FuYWx5c2lzKAogICAgc2FtcGxlX3NldF9zdGF0aXN0aWNzOiBkaWN0LAogICAgaW5wdXRzOiBwZC5EYXRhRnJhbWUsCiAgICBkcmlmdF90aHJlc2hvbGQ6IGZsb2F0LAogICAgcG9zc2libGVfZHJpZnRfdGhyZXNob2xkOiBmbG9hdCwKICAgIGluZl9jYXBwaW5nOiBmbG9hdCwKKSAtPiBUdXBsZVtBcnRpZmFjdCwgQXJ0aWZhY3QsIGRpY3RdOgogICAgIiIiCiAgICBQZXJmb3JtIGRyaWZ0IGFuYWx5c2lzLCBwcm9kdWNpbmcgdGhlIGRyaWZ0IHRhYmxlIGFydGlmYWN0IGZvciBsb2dnaW5nIHBvc3QgcHJlZGljdGlvbi4KCiAgICA6cGFyYW0gc2FtcGxlX3NldF9zdGF0aXN0aWNzOiAgICBUaGUgc3RhdGlzdGljcyBvZiB0aGUgc2FtcGxlIHNldCBsb2dnZWQgYWxvbmcgYSBtb2RlbC4KICAgIDpwYXJhbSBpbnB1dHM6ICAgICAgICAgICAgICAgICAgIElucHV0IGRhdGFzZXQgdG8gcGVyZm9ybSB0aGUgZHJpZnQgY2FsY3VsYXRpb24gb24uCiAgICA6cGFyYW0gZHJpZnRfdGhyZXNob2xkOiAgICAgICAgICBUaGUgdGhyZXNob2xkIG9mIHdoaWNoIHRvIG1hcmsgZHJpZnRzLgogICAgOnBhcmFtIHBvc3NpYmxlX2RyaWZ0X3RocmVzaG9sZDogVGhlIHRocmVzaG9sZCBvZiB3aGljaCB0byBtYXJrIHBvc3NpYmxlIGRyaWZ0cy4KICAgIDpwYXJhbSBpbmZfY2FwcGluZzogICAgICAgICAgICAgIFRoZSB2YWx1ZSB0byBzZXQgZm9yIHdoZW4gaXQgcmVhY2hlZCBpbmZpbml0eS4KCiAgICA6cmV0dXJuczogQSB0dXBsZSBvZgogICAgICAgICAgICAgIFswXSA9IEFuIE1MUnVuIGFydGlmYWN0IGhvbGRpbmcgdGhlIEhUTUwgY29kZSBvZiB0aGUgZHJpZnQgdGFibGUgcGxvdC4KICAgICAgICAgICAgICBbMV0gPSBBbiBNTFJ1biBhcnRpZmFjdCBob2xkaW5nIHRoZSBtZXRyaWMgcGVyIGZlYXR1cmUgZGljdGlvbmFyeS4KICAgICAgICAgICAgICBbMl0gPSBSZXN1bHRzIHRvIGxvZyB0aGUgZmluYWwgYW5hbHlzaXMgb3V0Y29tZS4KICAgICIiIgogICAgIyBDYWxjdWxhdGUgdGhlIGlucHV0J3Mgc3RhdGlzdGljczoKICAgIGlucHV0c19zdGF0aXN0aWNzID0gY2FsY3VsYXRlX2lucHV0c19zdGF0aXN0aWNzKAogICAgICAgIHNhbXBsZV9zZXRfc3RhdGlzdGljcz1zYW1wbGVfc2V0X3N0YXRpc3RpY3MsCiAgICAgICAgaW5wdXRzPWlucHV0cywKICAgICkKCiAgICAjIENhbGN1bGF0ZSBkcmlmdDoKICAgIHZpcnR1YWxfZHJpZnQgPSBWaXJ0dWFsRHJpZnQoaW5mX2NhcHBpbmc9aW5mX2NhcHBpbmcpCiAgICBtZXRyaWNzID0gdmlydHVhbF9kcmlmdC5jb21wdXRlX2RyaWZ0X2Zyb21faGlzdG9ncmFtcygKICAgICAgICBmZWF0dXJlX3N0YXRzPXNhbXBsZV9zZXRfc3RhdGlzdGljcywKICAgICAgICBjdXJyZW50X3N0YXRzPWlucHV0c19zdGF0aXN0aWNzLAogICAgKQogICAgZHJpZnRfcmVzdWx0cyA9IHZpcnR1YWxfZHJpZnQuY2hlY2tfZm9yX2RyaWZ0X3Blcl9mZWF0dXJlKAogICAgICAgIG1ldHJpY3NfcmVzdWx0c19kaWN0aW9uYXJ5PW1ldHJpY3MsCiAgICAgICAgcG9zc2libGVfZHJpZnRfdGhyZXNob2xkPXBvc3NpYmxlX2RyaWZ0X3RocmVzaG9sZCwKICAgICAgICBkcmlmdF9kZXRlY3RlZF90aHJlc2hvbGQ9ZHJpZnRfdGhyZXNob2xkLAogICAgKQoKICAgICMgVmFsaWRhdGUgYWxsIGZlYXR1cmUgY29sdW1ucyBuYW1lZCB0aGUgc2FtZSBiZXR3ZWVuIHRoZSBpbnB1dHMgYW5kIHNhbXBsZSBzZXRzOgogICAgc2FtcGxlX2ZlYXR1cmVzID0gc2V0KAogICAgICAgIFsKICAgICAgICAgICAgZmVhdHVyZV9uYW1lCiAgICAgICAgICAgIGZvciBmZWF0dXJlX25hbWUsIGZlYXR1cmVfc3RhdGlzdGljcyBpbiBzYW1wbGVfc2V0X3N0YXRpc3RpY3MuaXRlbXMoKQogICAgICAgICAgICBpZiBpc2luc3RhbmNlKGZlYXR1cmVfc3RhdGlzdGljcywgZGljdCkKICAgICAgICBdCiAgICApCiAgICBpbnB1dF9mZWF0dXJlcyA9IHNldChpbnB1dHMuY29sdW1ucykKICAgIGlmIGxlbihzYW1wbGVfZmVhdHVyZXMgJiBpbnB1dF9mZWF0dXJlcykgIT0gbGVuKGlucHV0X2ZlYXR1cmVzKToKICAgICAgICByYWlzZSBtbHJ1bi5lcnJvcnMuTUxSdW5JbnZhbGlkQXJndW1lbnRFcnJvcigKICAgICAgICAgICAgZiJOb3QgYWxsIGZlYXR1cmUgbmFtZXMgd2VyZSBtYXRjaGluZyBiZXR3ZWVuIHRoZSBpbnB1dHMgYW5kIHRoZSBzYW1wbGUgc2V0IHByb3ZpZGVkOiAiCiAgICAgICAgICAgIGYie2lucHV0X2ZlYXR1cmVzIC0gc2FtcGxlX2ZlYXR1cmVzIHwgc2FtcGxlX2ZlYXR1cmVzIC0gaW5wdXRfZmVhdHVyZXN9IgogICAgICAgICkKCiAgICAjIFBsb3Q6CiAgICBodG1sX3Bsb3QgPSBGZWF0dXJlc0RyaWZ0VGFibGVQbG90KCkucHJvZHVjZSgKICAgICAgICBmZWF0dXJlcz1saXN0KGlucHV0X2ZlYXR1cmVzKSwKICAgICAgICBzYW1wbGVfc2V0X3N0YXRpc3RpY3M9c2FtcGxlX3NldF9zdGF0aXN0aWNzLAogICAgICAgIGlucHV0c19zdGF0aXN0aWNzPWlucHV0c19zdGF0aXN0aWNzLAogICAgICAgIG1ldHJpY3M9bWV0cmljcywKICAgICAgICBkcmlmdF9yZXN1bHRzPWRyaWZ0X3Jlc3VsdHMsCiAgICApCgogICAgIyBQcmVwYXJlIG1ldHJpY3MgcGVyIGZlYXR1cmUgZGljdGlvbmFyeToKICAgIG1ldHJpY3NfcGVyX2ZlYXR1cmUgPSB7CiAgICAgICAgZmVhdHVyZTogX2dldF9kcmlmdF9yZXN1bHQoCiAgICAgICAgICAgIHR2ZD1tZXRyaWNfZGljdGlvbmFyeVsidHZkIl0sCiAgICAgICAgICAgIGhlbGxpbmdlcj1tZXRyaWNfZGljdGlvbmFyeVsiaGVsbGluZ2VyIl0sCiAgICAgICAgICAgIHRocmVzaG9sZD1kcmlmdF90aHJlc2hvbGQsCiAgICAgICAgKVsxXQogICAgICAgIGZvciBmZWF0dXJlLCBtZXRyaWNfZGljdGlvbmFyeSBpbiBtZXRyaWNzLml0ZW1zKCkKICAgICAgICBpZiBpc2luc3RhbmNlKG1ldHJpY19kaWN0aW9uYXJ5LCBkaWN0KQogICAgfQoKICAgICMgQ2FsY3VsYXRlIHRoZSBmaW5hbCBhbmFseXNpcyByZXN1bHQ6CiAgICBkcmlmdF9zdGF0dXMsIGRyaWZ0X21ldHJpYyA9IF9nZXRfZHJpZnRfcmVzdWx0KAogICAgICAgIHR2ZD1tZXRyaWNzWyJ0dmRfbWVhbiJdLAogICAgICAgIGhlbGxpbmdlcj1tZXRyaWNzWyJoZWxsaW5nZXJfbWVhbiJdLAogICAgICAgIHRocmVzaG9sZD1kcmlmdF90aHJlc2hvbGQsCiAgICApCgogICAgcmV0dXJuICgKICAgICAgICBBcnRpZmFjdChib2R5PWh0bWxfcGxvdCwgZm9ybWF0PSJodG1sIiwga2V5PSJkcmlmdF90YWJsZV9wbG90IiksCiAgICAgICAgQXJ0aWZhY3QoCiAgICAgICAgICAgIGJvZHk9anNvbi5kdW1wcyhtZXRyaWNzX3Blcl9mZWF0dXJlKSwKICAgICAgICAgICAgZm9ybWF0PSJqc29uIiwKICAgICAgICAgICAga2V5PSJmZWF0dXJlc19kcmlmdF9yZXN1bHRzIiwKICAgICAgICApLAogICAgICAgIHsiZHJpZnRfc3RhdHVzIjogZHJpZnRfc3RhdHVzLCAiZHJpZnRfbWV0cmljIjogZHJpZnRfbWV0cmljfSwKICAgICkKCgpkZWYgcHJlZGljdCgKICAgIGNvbnRleHQ6IG1scnVuLk1MQ2xpZW50Q3R4LAogICAgbW9kZWw6IHN0ciwKICAgIGRhdGFzZXQ6IERhdGFzZXRUeXBlLAogICAgZHJvcF9jb2x1bW5zOiBVbmlvbltzdHIsIExpc3Rbc3RyXSwgaW50LCBMaXN0W2ludF1dID0gTm9uZSwKICAgIGxhYmVsX2NvbHVtbnM6IFVuaW9uW3N0ciwgTGlzdFtzdHJdXSA9IE5vbmUsCiAgICBsb2dfcmVzdWx0X3NldDogYm9vbCA9IFRydWUsCiAgICByZXN1bHRfc2V0X25hbWU6IHN0ciA9ICJwcmVkaWN0aW9uIiwKICAgIHBlcmZvcm1fZHJpZnRfYW5hbHlzaXM6IGJvb2wgPSBOb25lLAogICAgc2FtcGxlX3NldDogRGF0YXNldFR5cGUgPSBOb25lLAogICAgZHJpZnRfdGhyZXNob2xkOiBmbG9hdCA9IDAuNywKICAgIHBvc3NpYmxlX2RyaWZ0X3RocmVzaG9sZDogZmxvYXQgPSAwLjUsCiAgICBpbmZfY2FwcGluZzogZmxvYXQgPSAxMC4wLAogICAgYXJ0aWZhY3RzX3RhZzogc3RyID0gIiIsCiAgICAqKnByZWRpY3Rfa3dhcmdzOiBEaWN0W3N0ciwgQW55XSwKKToKICAgICIiIgogICAgUGVyZm9ybSBhIHByZWRpY3Rpb24gb24gYSBnaXZlbiBkYXRhc2V0IHdpdGggdGhlIGdpdmVuIG1vZGVsLiBDYW4gcGVyZm9ybSBkcmlmdCBhbmFseXNpcyBiZXR3ZWVuIHRoZSBzYW1wbGUgc2V0CiAgICBzdGF0aXN0aWNzIHN0b3JlZCBpbiB0aGUgbW9kZWwgdG8gdGhlIGN1cnJlbnQgaW5wdXQgZGF0YS4gVGhlIGRyaWZ0IHJ1bGUgaXMgdGhlIHZhbHVlIHBlci1mZWF0dXJlIG1lYW4gb2YgdGhlIFRWRAogICAgYW5kIEhlbGxpbmdlciBzY29yZXMgYWNjb3JkaW5nIHRvIHRoZSB0aHJlc2hvbGRzIGNvbmZpZ3VyZXMgaGVyZS4KCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICAgICAgICAgICBNTFJ1biBjb250ZXh0LgogICAgOnBhcmFtIG1vZGVsOiAgICAgICAgICAgICAgICAgICAgVGhlIG1vZGVsIFN0b3JlIHBhdGguCiAgICA6cGFyYW0gZGF0YXNldDogICAgICAgICAgICAgICAgICBUaGUgZGF0YXNldCB0byBpbmZlciB0aHJvdWdoIHRoZSBtb2RlbC4gQ2FuIGJlIHBhc3NlZCBpbiBgaW5wdXRzYCBhcyBlaXRoZXIgYQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGF0YXNldCBhcnRpZmFjdCAvIEZlYXR1cmUgdmVjdG9yIFVSSS4gT3IsIGluIGBwYXJhbWV0ZXJzYCBhcyBhIGxpc3QsIGRpY3Rpb25hcnkgb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bXB5IGFycmF5LgogICAgOnBhcmFtIGRyb3BfY29sdW1uczogICAgICAgICAgICAgQSBzdHJpbmcgLyBpbnRlZ2VyIG9yIGEgbGlzdCBvZiBzdHJpbmdzIC8gaW50ZWdlcnMgdGhhdCByZXByZXNlbnQgdGhlIGNvbHVtbiBuYW1lcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyBpbmRpY2VzIHRvIGRyb3AuIFdoZW4gdGhlIGRhdGFzZXQgaXMgYSBsaXN0IG9yIGEgbnVtcHkgYXJyYXkgdGhpcyBwYXJhbWV0ZXIgbXVzdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgcmVwcmVzZW50ZWQgYnkgaW50ZWdlcnMuCiAgICA6cGFyYW0gbGFiZWxfY29sdW1uczogICAgICAgICAgICBUaGUgdGFyZ2V0IGxhYmVsKHMpIG9mIHRoZSBjb2x1bW4ocykgaW4gdGhlIGRhdGFzZXQgZm9yIFJlZ3Jlc3Npb24gb3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENsYXNzaWZpY2F0aW9uIHRhc2tzLgogICAgOnBhcmFtIGxvZ19yZXN1bHRfc2V0OiAgICAgICAgICAgV2hldGhlciB0byBsb2cgdGhlIHJlc3VsdCBzZXQgLSBhIERhdGFGcmFtZSBvZiB0aGUgZ2l2ZW4gaW5wdXRzIGNvbmNhdGVuYXRlZCB3aXRoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcHJlZGljdGlvbnMuIERlZmF1bHRlZCB0byBUcnVlLgogICAgOnBhcmFtIHJlc3VsdF9zZXRfbmFtZTogICAgICAgICAgVGhlIGRiIGtleSB0byBzZXQgbmFtZSBvZiB0aGUgcHJlZGljdGlvbiByZXN1bHQgYW5kIHRoZSBmaWxlbmFtZS4gRGVmYXVsdGVkIHRvCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAncHJlZGljdGlvbicuCiAgICA6cGFyYW0gcGVyZm9ybV9kcmlmdF9hbmFseXNpczogICBXaGV0aGVyIHRvIHBlcmZvcm0gZHJpZnQgYW5hbHlzaXMgYmV0d2VlbiB0aGUgc2FtcGxlIHNldCBvZiB0aGUgbW9kZWwgb2JqZWN0IHRvIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXNldCBnaXZlbi4gQnkgZGVmYXVsdCwgTm9uZSwgd2hpY2ggbWVhbnMgaXQgd2lsbCBwZXJmb3JtIGRyaWZ0IGFuYWx5c2lzIGlmIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWwgaGFzIGEgc2FtcGxlIHNldCBzdGF0aXN0aWNzLiBQZXJmb3JtIGRyaWZ0IGFuYWx5c2lzIHdpbGwgcHJvZHVjZSBhIGRhdGEgZHJpZnQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYmxlIGFydGlmYWN0LgogICAgOnBhcmFtIHNhbXBsZV9zZXQ6ICAgICAgICAgICAgICAgQSBzYW1wbGUgZGF0YXNldCB0byBnaXZlIHRvIGNvbXBhcmUgdGhlIGlucHV0cyBpbiB0aGUgZHJpZnQgYW5hbHlzaXMuIFRoZSBkZWZhdWx0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaG9zZW4gc2FtcGxlIHNldCB3aWxsIGFsd2F5cyBiZSB0aGUgb25lIHdobyBpcyBzZXQgaW4gdGhlIG1vZGVsIGFydGlmYWN0IGl0c2VsZi4KICAgIDpwYXJhbSBkcmlmdF90aHJlc2hvbGQ6ICAgICAgICAgIFRoZSB0aHJlc2hvbGQgb2Ygd2hpY2ggdG8gbWFyayBkcmlmdHMuIERlZmF1bHRlZCB0byAwLjcuCiAgICA6cGFyYW0gcG9zc2libGVfZHJpZnRfdGhyZXNob2xkOiBUaGUgdGhyZXNob2xkIG9mIHdoaWNoIHRvIG1hcmsgcG9zc2libGUgZHJpZnRzLiBEZWZhdWx0ZWQgdG8gMC41LgogICAgOnBhcmFtIGluZl9jYXBwaW5nOiAgICAgICAgICAgICAgVGhlIHZhbHVlIHRvIHNldCBmb3Igd2hlbiBpdCByZWFjaGVkIGluZmluaXR5LiBEZWZhdWx0ZWQgdG8gMTAuMC4KICAgIDpwYXJhbSBhcnRpZmFjdHNfdGFnOiAgICAgICAgICAgIFRhZyB0byB1c2UgZm9yIGFsbCB0aGUgYXJ0aWZhY3RzIHJlc3VsdGVkIGZyb20gdGhlIGZ1bmN0aW9uLgogICAgIiIiCiAgICAjIEdldCBkYXRhc2V0IGJ5IFVSTCBvciBieSBGZWF0dXJlVmVjdG9yOgogICAgeCwgbGFiZWxfY29sdW1ucyA9IF9yZWFkX2RhdGFzZXRfYXNfZGF0YWZyYW1lKAogICAgICAgIGRhdGFzZXQ9ZGF0YXNldCwKICAgICAgICBsYWJlbF9jb2x1bW5zPWxhYmVsX2NvbHVtbnMsCiAgICAgICAgZHJvcF9jb2x1bW5zPWRyb3BfY29sdW1ucywKICAgICkKCiAgICAjIExvYWRpbmcgdGhlIG1vZGVsOgogICAgY29udGV4dC5sb2dnZXIuaW5mbyhmIkxvYWRpbmcgbW9kZWwuLi4iKQogICAgbW9kZWxfaGFuZGxlciA9IEF1dG9NTFJ1bi5sb2FkX21vZGVsKG1vZGVsX3BhdGg9bW9kZWwsIGNvbnRleHQ9Y29udGV4dCkKCiAgICAjIFByZWRpY3Q6CiAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYiQ2FsY3VsYXRpbmcgcHJlZGljdGlvbi4uLiIpCiAgICB5X3ByZWQgPSBtb2RlbF9oYW5kbGVyLm1vZGVsLnByZWRpY3QoeCwgKipwcmVkaWN0X2t3YXJncykKCiAgICAjIFByZXBhcmUgdGhlIHJlc3VsdCBzZXQ6CiAgICByZXN1bHRfc2V0ID0gX3ByZXBhcmVfcmVzdWx0X3NldCh4PXgsIGxhYmVsX2NvbHVtbnM9bGFiZWxfY29sdW1ucywgeV9wcmVkPXlfcHJlZCkKCiAgICAjIENoZWNrIGZvciBsb2dnaW5nIHRoZSByZXN1bHQgc2V0OgogICAgaWYgbG9nX3Jlc3VsdF9zZXQ6CiAgICAgICAgY29udGV4dC5sb2dnZXIuaW5mbyhmIkxvZ2dpbmcgcmVzdWx0IHNldCAoeCB8IHByZWRpY3Rpb24pLi4uIikKICAgICAgICBjb250ZXh0LmxvZ19kYXRhc2V0KAogICAgICAgICAgICBrZXk9cmVzdWx0X3NldF9uYW1lLAogICAgICAgICAgICBkZj1yZXN1bHRfc2V0LAogICAgICAgICAgICBkYl9rZXk9cmVzdWx0X3NldF9uYW1lLAogICAgICAgICAgICB0YWc9YXJ0aWZhY3RzX3RhZywKICAgICAgICApCgogICAgIyBDaGVjayBmb3IgcGVyZm9ybWluZyBkcmlmdCBhbmFseXNpczoKICAgIGlmICgKICAgICAgICBwZXJmb3JtX2RyaWZ0X2FuYWx5c2lzIGlzIE5vbmUKICAgICAgICBhbmQgbW9kZWxfaGFuZGxlci5fbW9kZWxfYXJ0aWZhY3Quc3BlYy5mZWF0dXJlX3N0YXRzIGlzIG5vdCBOb25lCiAgICApOgogICAgICAgIHBlcmZvcm1fZHJpZnRfYW5hbHlzaXMgPSBUcnVlCiAgICBpZiBwZXJmb3JtX2RyaWZ0X2FuYWx5c2lzOgogICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8oIlBlcmZvcm1pbmcgZHJpZnQgYW5hbHlzaXMuLi4iKQogICAgICAgICMgR2V0IHRoZSBzYW1wbGUgc2V0IHN0YXRpc3RpY3MgKGVpdGhlciBmcm9tIHRoZSBzYW1wbGUgc2V0IG9yIGZyb20gdGhlIHN0YXRpc3RpY3MgbG9nZ2VkIHdpdGggdGhlIG1vZGVsKToKICAgICAgICBzYW1wbGVfc2V0X3N0YXRpc3RpY3MgPSBfZ2V0X3NhbXBsZV9zZXRfc3RhdGlzdGljcygKICAgICAgICAgICAgc2FtcGxlX3NldD1zYW1wbGVfc2V0LAogICAgICAgICAgICBtb2RlbF9hcnRpZmFjdF9mZWF0dXJlX3N0YXRzPW1vZGVsX2hhbmRsZXIuX21vZGVsX2FydGlmYWN0LnNwZWMuZmVhdHVyZV9zdGF0cywKICAgICAgICApCiAgICAgICAgIyBQcm9kdWNlIHRoZSBhcnRpZmFjdDoKICAgICAgICAoCiAgICAgICAgICAgIGRyaWZ0X3RhYmxlX3Bsb3QsCiAgICAgICAgICAgIG1ldHJpY19wZXJfZmVhdHVyZV9kaWN0LAogICAgICAgICAgICBhbmFseXNpc19yZXN1bHRzLAogICAgICAgICkgPSBfcGVyZm9ybV9kcmlmdF9hbmFseXNpcygKICAgICAgICAgICAgc2FtcGxlX3NldF9zdGF0aXN0aWNzPXNhbXBsZV9zZXRfc3RhdGlzdGljcywKICAgICAgICAgICAgaW5wdXRzPXJlc3VsdF9zZXQsCiAgICAgICAgICAgIGRyaWZ0X3RocmVzaG9sZD1kcmlmdF90aHJlc2hvbGQsCiAgICAgICAgICAgIHBvc3NpYmxlX2RyaWZ0X3RocmVzaG9sZD1wb3NzaWJsZV9kcmlmdF90aHJlc2hvbGQsCiAgICAgICAgICAgIGluZl9jYXBwaW5nPWluZl9jYXBwaW5nLAogICAgICAgICkKICAgICAgICAjIExvZyB0aGUgYXJ0aWZhY3QgYW5kIHJlc3VsdHM6CiAgICAgICAgY29udGV4dC5sb2dfYXJ0aWZhY3QoZHJpZnRfdGFibGVfcGxvdCwgdGFnPWFydGlmYWN0c190YWcpCiAgICAgICAgY29udGV4dC5sb2dfYXJ0aWZhY3QobWV0cmljX3Blcl9mZWF0dXJlX2RpY3QsIHRhZz1hcnRpZmFjdHNfdGFnKQogICAgICAgIGNvbnRleHQubG9nX3Jlc3VsdHMocmVzdWx0cz1hbmFseXNpc19yZXN1bHRzKQo=
    base_image: mlrun/ml-models
    commands:
    - python -m pip install scikit-learn
    code_origin: https://github.com/guy1992l/functions.git#883c29cfebd31a82513a7d393820740e27026d5b:/Users/guyl/Projects/functions/batch_predict/batch_predict.py
    origin_filename: /Users/guyl/Projects/functions/batch_predict/batch_predict.py
    with_mlrun: false
    auto_build: true
  entry_points:
    predict:
      name: predict
      doc: 'Perform a prediction on a given dataset with the given model. Can perform
        drift analysis between the sample set

        statistics stored in the model to the current input data. The drift rule is
        the value per-feature mean of the TVD

        and Hellinger scores according to the thresholds configures here.'
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context.
        default: ''
      - name: model
        type: str
        doc: The model Store path.
        default: ''
      - name: dataset
        type: DatasetType
        doc: The dataset to infer through the model. Can be passed in `inputs` as
          either a Dataset artifact / Feature vector URI. Or, in `parameters` as a
          list, dictionary or numpy array.
        default: ''
      - name: drop_columns
        type: Union[str, List[str], int, List[int]]
        doc: A string / integer or a list of strings / integers that represent the
          column names / indices to drop. When the dataset is a list or a numpy array
          this parameter must be represented by integers.
        default: null
      - name: label_columns
        type: Union[str, List[str]]
        doc: The target label(s) of the column(s) in the dataset for Regression or
          Classification tasks.
        default: null
      - name: log_result_set
        type: bool
        doc: Whether to log the result set - a DataFrame of the given inputs concatenated
          with the predictions. Defaulted to True.
        default: true
      - name: result_set_name
        type: str
        doc: The db key to set name of the prediction result and the filename. Defaulted
          to 'prediction'.
        default: prediction
      - name: perform_drift_analysis
        type: bool
        doc: Whether to perform drift analysis between the sample set of the model
          object to the dataset given. By default, None, which means it will perform
          drift analysis if the model has a sample set statistics. Perform drift analysis
          will produce a data drift table artifact.
        default: null
      - name: sample_set
        type: DatasetType
        doc: A sample dataset to give to compare the inputs in the drift analysis.
          The default chosen sample set will always be the one who is set in the model
          artifact itself.
        default: null
      - name: drift_threshold
        type: float
        doc: The threshold of which to mark drifts. Defaulted to 0.7.
        default: 0.7
      - name: possible_drift_threshold
        type: float
        doc: The threshold of which to mark possible drifts. Defaulted to 0.5.
        default: 0.5
      - name: inf_capping
        type: float
        doc: The value to set for when it reached infinity. Defaulted to 10.0.
        default: 10.0
      - name: artifacts_tag
        type: str
        doc: Tag to use for all the artifacts resulted from the function.
        default: ''
      outputs:
      - default: ''
      lineno: 294
  description: Batch prediction for the common ML frameworks (SciKit-Learn, XGBoost
    and LightGBM) while performing data drift analysis.
  default_handler: predict
  disable_auto_mount: false
  allow_empty_resources: true
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
