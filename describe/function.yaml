kind: job
metadata:
  name: describe
  tag: ''
  hash: 6e94f6e7fcee3be4ca34556ff790320dc13f8d0f
  project: ''
  labels:
    author: Davids
  categories:
  - data-analysis
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: IyBDb3B5cmlnaHQgMjAxOSBJZ3VhemlvCiMKIyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKIyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiMgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CiMKIyAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiMKIyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiMgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKIyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KIyBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiMgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiMKIyBHZW5lcmF0ZWQgYnkgbnVjbGlvLmV4cG9ydC5OdWNsaW9FeHBvcnRlcgoKaW1wb3J0IHdhcm5pbmdzCmZyb20gdHlwaW5nIGltcG9ydCBVbmlvbgoKaW1wb3J0IG1scnVuCmltcG9ydCBudW1weSBhcyBucAoKd2FybmluZ3Muc2ltcGxlZmlsdGVyKGFjdGlvbj0iaWdub3JlIiwgY2F0ZWdvcnk9RnV0dXJlV2FybmluZykKCmltcG9ydCBtbHJ1bi5mZWF0dXJlX3N0b3JlIGFzIGZzdG9yZQppbXBvcnQgcGFuZGFzIGFzIHBkCmltcG9ydCBwbG90bHkuZXhwcmVzcyBhcyBweAppbXBvcnQgcGxvdGx5LmZpZ3VyZV9mYWN0b3J5IGFzIGZmCmltcG9ydCBwbG90bHkuZ3JhcGhfb2JqZWN0cyBhcyBnbwpmcm9tIG1scnVuLmFydGlmYWN0cyBpbXBvcnQgKEFydGlmYWN0LCBEYXRhc2V0QXJ0aWZhY3QsIFBsb3RseUFydGlmYWN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhYmxlQXJ0aWZhY3QsIHVwZGF0ZV9kYXRhc2V0X21ldGEpCmZyb20gbWxydW4uZGF0YXN0b3JlIGltcG9ydCBEYXRhSXRlbQpmcm9tIG1scnVuLmV4ZWN1dGlvbiBpbXBvcnQgTUxDbGllbnRDdHgKZnJvbSBtbHJ1bi5mZWF0dXJlX3N0b3JlIGltcG9ydCBGZWF0dXJlU2V0LCBGZWF0dXJlVmVjdG9yCmZyb20gcGxvdGx5LnN1YnBsb3RzIGltcG9ydCBtYWtlX3N1YnBsb3RzCgpwZC5zZXRfb3B0aW9uKCJkaXNwbGF5LmZsb2F0X2Zvcm1hdCIsIGxhbWJkYSB4OiAiJS4yZiIgJSB4KQpNQVhfU0laRV9PRl9ERiA9IDUwMDAwMAoKCmRlZiBhbmFseXplKAogICAgY29udGV4dDogTUxDbGllbnRDdHgsCiAgICBuYW1lOiBzdHIgPSAiZGF0YXNldCIsCiAgICB0YWJsZTogVW5pb25bRmVhdHVyZVNldCwgRGF0YUl0ZW1dID0gTm9uZSwKICAgIGxhYmVsX2NvbHVtbjogc3RyID0gTm9uZSwKICAgIHBsb3RzX2Rlc3Q6IHN0ciA9ICJwbG90cyIsCiAgICByYW5kb21fc3RhdGU6IGludCA9IDEsCiAgICBwcm9ibGVtX3R5cGU6IHN0ciA9ICJjbGFzc2lmaWNhdGlvbiIsCiAgICBkYXNrX2tleTogc3RyID0gImRhc2tfa2V5IiwKICAgIGRhc2tfZnVuY3Rpb246IHN0ciA9IE5vbmUsCiAgICBkYXNrX2NsaWVudD1Ob25lLAopIC0+IE5vbmU6CiAgICAiIiIKICAgIFRoZSBmdW5jdGlvbiB3aWxsIG91dHB1dCB0aGUgZm9sbG93aW5nIGFydGlmYWN0cyBwZXIKICAgIGNvbHVtbiB3aXRoaW4gdGhlIGRhdGEgZnJhbWUgKGJhc2VkIG9uIGRhdGEgdHlwZXMpCiAgICBJZiB0aGUgZGF0YSBoYXMgbW9yZSB0aGFuIDUwMCwwMDAgc2FtcGxlIHdlCiAgICBzYW1wbGUgcmFuZG9tbHkgNTAwLDAwMCBzYW1wbGVzOgoKICAgIGRlc2NyaWJlIGNzdgogICAgaGlzdG9ncmFtcwogICAgc2NhdHRlci0yZAogICAgdmlvbGluIGNoYXJ0CiAgICBjb3JyZWxhdGlvbi1tYXRyaXggY2hhcnQKICAgIGNvcnJlbGF0aW9uLW1hdHJpeCBjc3YKICAgIGltYmFsYW5jZSBwaWUgY2hhcnQKICAgIGltYmFsYW5jZS13ZWlnaHRzLXZlYyBjc3YKCiAgICA6cGFyYW0gY29udGV4dDogICAgICAgICAgICAgICAgIFRoZSBmdW5jdGlvbiBjb250ZXh0CiAgICA6cGFyYW0gbmFtZTogICAgICAgICAgICAgICAgICAgIEtleSBvZiBkYXRhc2V0IHRvIGRhdGFiYXNlICgiZGF0YXNldCIgZm9yIGRlZmF1bHQpCiAgICA6cGFyYW0gdGFibGU6ICAgICAgICAgICAgICAgICAgIE1MUnVuIGlucHV0IHBvaW50aW5nIHRvIHBhbmRhcyBkYXRhZnJhbWUgKGNzdi9wYXJxdWV0IGZpbGUgcGF0aCkgb3IgRmVhdHVyZVNldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyBwYXJhbQogICAgOnBhcmFtIGxhYmVsX2NvbHVtbjogICAgICAgICAgICBHcm91bmQgdHJ1dGggY29sdW1uIGxhYmVsCiAgICA6cGFyYW0gcGxvdHNfZGVzdDogICAgICAgICAgICAgIERlc3RpbmF0aW9uIGZvbGRlciBvZiBzdW1tYXJ5IHBsb3RzIChyZWxhdGl2ZSB0byBhcnRpZmFjdF9wYXRoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoInBsb3RzIiBmb3IgZGVmYXVsdCkKICAgIDpwYXJhbSByYW5kb21fc3RhdGU6ICAgICAgICAgICAgV2hlbiB0aGUgdGFibGUgaGFzIG1vcmUgdGhhbiA1MDAsMDAwIHNhbXBsZXMsIHdlIHNhbXBsZSByYW5kb21seSA1MDAsMDAwIHNhbXBsZXMKICAgIDpwYXJhbSBwcm9ibGVtX3R5cGUgICAgICAgICAgICAgVGhlIHR5cGUgb2YgdGhlIE1MIHByb2JsZW0gdGhlIGRhdGEgZmFjaW5nIC0gcmVncmVzc2lvbiwgY2xhc3NpZmljYXRpb24gb3IgTm9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY2xhc3NpZmljYXRpb24gZm9yIGRlZmF1bHQpCiAgICA6cGFyYW0gZGFza19rZXk6ICAgICAgICAgICAgICAgIEtleSBvZiBkYXRhZnJhbWUgaW4gZGFzayBjbGllbnQgImRhdGFzZXRzIiBhdHRyaWJ1dGUKICAgIDpwYXJhbSBkYXNrX2Z1bmN0aW9uOiAgICAgICAgICAgRGFzayBmdW5jdGlvbiB1cmwgKGRiOi8vLi4pCiAgICA6cGFyYW0gZGFza19jbGllbnQ6ICAgICAgICAgICAgIERhc2sgY2xpZW50IG9iamVjdAogICAgIiIiCiAgICBkYXRhX2l0ZW0sIGZlYXR1cmVzZXQsIGNyZWF0LCB1cGRhdGUgPSBGYWxzZSwgRmFsc2UsIEZhbHNlLCBGYWxzZQogICAgZ2V0X2Zyb21fdGFibGUgPSBUcnVlCiAgICBpZiBkYXNrX2Z1bmN0aW9uIG9yIGRhc2tfY2xpZW50OgogICAgICAgIGRhdGFfaXRlbSwgY3JlYXQgPSBUcnVlLCBUcnVlCiAgICAgICAgaWYgZGFza19mdW5jdGlvbjoKICAgICAgICAgICAgY2xpZW50ID0gbWxydW4uaW1wb3J0X2Z1bmN0aW9uKGRhc2tfZnVuY3Rpb24pLmNsaWVudAogICAgICAgIGVsaWYgZGFza19jbGllbnQ6CiAgICAgICAgICAgIGNsaWVudCA9IGRhc2tfY2xpZW50CiAgICAgICAgZWxzZToKICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiZGFzayBjbGllbnQgd2FzIG5vdCBwcm92aWRlZCIpCgogICAgICAgIGlmIGRhc2tfa2V5IGluIGNsaWVudC5kYXRhc2V0czoKICAgICAgICAgICAgZGYgPSBjbGllbnQuZ2V0X2RhdGFzZXQoZGFza19rZXkpCiAgICAgICAgICAgIGRhdGFfaXRlbSwgY3JlYXQsIGdldF9mcm9tX3RhYmxlID0gVHJ1ZSwgVHJ1ZSwgRmFsc2UKICAgICAgICBlbGlmIHRhYmxlOgogICAgICAgICAgICBnZXRfZnJvbV90YWJsZSA9IFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKAogICAgICAgICAgICAgICAgZiJvbmx5IHRoZXNlIGRhdGFzZXRzIGFyZSBhdmFpbGFibGUge2NsaWVudC5kYXRhc2V0c30gaW4gY2xpZW50IHtjbGllbnR9IgogICAgICAgICAgICApCiAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbigiZGF0YXNldCBub3QgZm91bmQgb24gZGFzayBjbHVzdGVyIikKCiAgICBpZiBnZXRfZnJvbV90YWJsZToKICAgICAgICBpZiB0eXBlKHRhYmxlKSA9PSBEYXRhSXRlbToKICAgICAgICAgICAgaWYgdGFibGUubWV0YSBpcyBOb25lOgogICAgICAgICAgICAgICAgZGF0YV9pdGVtLCBjcmVhdCwgdXBkYXRlID0gVHJ1ZSwgVHJ1ZSwgRmFsc2UKICAgICAgICAgICAgZWxpZiB0YWJsZS5tZXRhLmtpbmQgPT0gImRhdGFzZXQiOgogICAgICAgICAgICAgICAgZGF0YV9pdGVtLCBjcmVhdCwgdXBkYXRlID0gVHJ1ZSwgRmFsc2UsIFRydWUKICAgICAgICAgICAgZWxpZiB0YWJsZS5tZXRhLmtpbmQgPT0gIkZlYXR1cmVWZWN0b3IiOgogICAgICAgICAgICAgICAgZGF0YV9pdGVtLCBjcmVhdCwgdXBkYXRlID0gVHJ1ZSwgRmFsc2UsIEZhbHNlCiAgICAgICAgICAgIGVsaWYgdGFibGUubWV0YS5raW5kID09ICJGZWF0dXJlU2V0IjoKICAgICAgICAgICAgICAgIGZlYXR1cmVzZXQsIGNyZWF0LCB1cGRhdGUgPSBUcnVlLCBGYWxzZSwgRmFsc2UKCiAgICAgICAgaWYgZGF0YV9pdGVtOgogICAgICAgICAgICBkZiA9IHRhYmxlLmFzX2RmKCkKICAgICAgICBlbGlmIGZlYXR1cmVzZXQ6CiAgICAgICAgICAgIHByb2plY3RfbmFtZSwgc2V0X25hbWUgPSAoCiAgICAgICAgICAgICAgICB0YWJsZS5fcGF0aC5zcGxpdCgiLyIpWzJdLAogICAgICAgICAgICAgICAgdGFibGUuX3BhdGguc3BsaXQoIi8iKVs0XSwKICAgICAgICAgICAgKQogICAgICAgICAgICBmZWF0dXJlX3NldCA9IGZzdG9yZS5nZXRfZmVhdHVyZV9zZXQoCiAgICAgICAgICAgICAgICBmInN0b3JlOi8vZmVhdHVyZS1zZXRzL3twcm9qZWN0X25hbWV9L3tzZXRfbmFtZX0iCiAgICAgICAgICAgICkKICAgICAgICAgICAgZGYgPSBmZWF0dXJlX3NldC50b19kYXRhZnJhbWUoKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmVycm9yKGYiV3JvbmcgdGFibGUgdHlwZS4iKQogICAgICAgICAgICByZXR1cm4KCiAgICBpZiBkZi5zaXplID4gTUFYX1NJWkVfT0ZfREY6CiAgICAgICAgZGYgPSBkZi5zYW1wbGUobj1pbnQoTUFYX1NJWkVfT0ZfREYgLyBkZi5zaGFwZVsxXSksIHJhbmRvbV9zdGF0ZT1yYW5kb21fc3RhdGUpCiAgICBleHRyYV9kYXRhID0ge30KCiAgICBpZiBsYWJlbF9jb2x1bW4gbm90IGluIGRmLmNvbHVtbnM6CiAgICAgICAgbGFiZWxfY29sdW1uID0gTm9uZQoKICAgIGV4dHJhX2RhdGFbImRlc2NyaWJlIGNzdiJdID0gY29udGV4dC5sb2dfYXJ0aWZhY3QoCiAgICAgICAgVGFibGVBcnRpZmFjdCgiZGVzY3JpYmUtY3N2IiwgZGY9ZGYuZGVzY3JpYmUoKSksCiAgICAgICAgbG9jYWxfcGF0aD1mIntwbG90c19kZXN0fS9kZXNjcmliZS5jc3YiLAogICAgKQoKICAgIHRyeToKICAgICAgICBfY3JlYXRlX2hpc3RvZ3JhbV9tYXRfYXJ0aWZhY3QoCiAgICAgICAgICAgIGNvbnRleHQsIGRmLCBleHRyYV9kYXRhLCBsYWJlbF9jb2x1bW4sIHBsb3RzX2Rlc3QKICAgICAgICApCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgY29udGV4dC5sb2dnZXIud2FybihmIkZhaWxlZCB0byBjcmVhdGUgaGlzdG9ncmFtIG1hdHJpeCBhcnRpZmFjdCBkdWUgdG86IHtlfSIpCiAgICB0cnk6CiAgICAgICAgX2NyZWF0ZV9mZWF0dXJlc19oaXN0b2dyYW1fYXJ0aWZhY3RzKAogICAgICAgICAgICBjb250ZXh0LCBkZiwgZXh0cmFfZGF0YSwgbGFiZWxfY29sdW1uLCBwbG90c19kZXN0LCBwcm9ibGVtX3R5cGUKICAgICAgICApCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgY29udGV4dC5sb2dnZXIud2FybihmIkZhaWxlZCB0byBjcmVhdGUgcGFpcnBsb3QgaGlzdG9ncmFtcyBkdWUgdG86IHtlfSIpCiAgICB0cnk6CiAgICAgICAgX2NyZWF0ZV9mZWF0dXJlc18yZF9zY2F0dGVyX2FydGlmYWN0cygKICAgICAgICAgICAgY29udGV4dCwgZGYsIGV4dHJhX2RhdGEsIGxhYmVsX2NvbHVtbiwgcGxvdHNfZGVzdCwgcHJvYmxlbV90eXBlCiAgICAgICAgKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGNvbnRleHQubG9nZ2VyLndhcm4oZiJGYWlsZWQgdG8gY3JlYXRlIHBhaXJwbG90IDJkX3NjYXR0ZXIgZHVlIHRvOiB7ZX0iKQogICAgdHJ5OgogICAgICAgIF9jcmVhdGVfdmlvbGluX2FydGlmYWN0KGNvbnRleHQsIGRmLCBleHRyYV9kYXRhLCBwbG90c19kZXN0KQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGNvbnRleHQubG9nZ2VyLndhcm4oZiJGYWlsZWQgdG8gY3JlYXRlIHZpb2xpbiBkaXN0cmlidXRpb24gcGxvdHMgZHVlIHRvOiB7ZX0iKQogICAgdHJ5OgogICAgICAgIF9jcmVhdGVfaW1iYWxhbmNlX2FydGlmYWN0KAogICAgICAgICAgICBjb250ZXh0LCBkZiwgZXh0cmFfZGF0YSwgbGFiZWxfY29sdW1uLCBwbG90c19kZXN0LCBwcm9ibGVtX3R5cGUKICAgICAgICApCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgY29udGV4dC5sb2dnZXIud2FybihmIkZhaWxlZCB0byBjcmVhdGUgY2xhc3MgaW1iYWxhbmNlIHBsb3QgZHVlIHRvOiB7ZX0iKQogICAgdHJ5OgogICAgICAgIF9jcmVhdGVfY29ycl9hcnRpZmFjdChjb250ZXh0LCBkZiwgZXh0cmFfZGF0YSwgbGFiZWxfY29sdW1uLCBwbG90c19kZXN0KQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGNvbnRleHQubG9nZ2VyLndhcm4oZiJGYWlsZWQgdG8gY3JlYXRlIGZlYXR1cmVzIGNvcnJlbGF0aW9uIHBsb3QgZHVlIHRvOiB7ZX0iKQoKICAgIGlmIG5vdCBkYXRhX2l0ZW06CiAgICAgICAgcmV0dXJuCgogICAgYXJ0aWZhY3QgPSB0YWJsZS5hcnRpZmFjdF91cmwKICAgIGlmIGNyZWF0OiAgIyBkYXRhc2V0IG5vdCBzdG9yZWQKICAgICAgICBhcnRpZmFjdCA9IERhdGFzZXRBcnRpZmFjdCgKICAgICAgICAgICAga2V5PSJkYXRhc2V0Iiwgc3RhdHM9VHJ1ZSwgZGY9ZGYsIGV4dHJhX2RhdGE9ZXh0cmFfZGF0YQogICAgICAgICkKICAgICAgICBhcnRpZmFjdCA9IGNvbnRleHQubG9nX2FydGlmYWN0KGFydGlmYWN0LCBkYl9rZXk9bmFtZSkKICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYiVGhlIGRhdGEgc2V0IGlzIGxvZ2dlZCB0byB0aGUgcHJvamVjdCB1bmRlciB7bmFtZX0gbmFtZSIpCgogICAgaWYgdXBkYXRlOgogICAgICAgIHVwZGF0ZV9kYXRhc2V0X21ldGEoYXJ0aWZhY3QsIGV4dHJhX2RhdGE9ZXh0cmFfZGF0YSkKICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKGYiVGhlIGRhdGEgc2V0IG5hbWVkIHtuYW1lfSBpcyB1cGRhdGVkIikKCiAgICAjIFRPRE8gOiAzLUQgcGxvdCBvbiBvbiBzZWxlY3RlZCBmZWF0dXJlcy4KICAgICMgVE9ETyA6IFJlaW50ZWdyYXRpb24gcGxvdCBvbiBvbiBzZWxlY3RlZCBmZWF0dXJlcy4KICAgICMgVE9ETyA6IFBDQSBwbG90ICh3aXRoIG9wdGlvbnMpCgoKZGVmIF9jcmVhdGVfaGlzdG9ncmFtX21hdF9hcnRpZmFjdCgKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgZGY6IHBkLkRhdGFGcmFtZSwKICAgIGV4dHJhX2RhdGE6IGRpY3QsCiAgICBsYWJlbF9jb2x1bW46IHN0ciwKICAgIHBsb3RzX2Rlc3Q6IHN0ciwKKToKICAgICIiIgogICAgQ3JlYXRlIGFuZCBsb2cgYSBoaXN0b2dyYW0gbWF0cml4IGFydGlmYWN0CiAgICAiIiIKICAgIGNvbnRleHQubG9nX2FydGlmYWN0KAogICAgICAgIGl0ZW09QXJ0aWZhY3QoCiAgICAgICAgICAgIGtleT0iaGlzdCIsCiAgICAgICAgICAgIGJvZHk9YiI8Yj4gRGVwcmVjYXRlZCwgc2VlIHRoZSBhcnRpZmFjdHMgc2NhdHRlci0yZCAiCiAgICAgICAgICAgIGIiYW5kIGhpc3RvZ3JhbXMgaW5zdGVhZDxiPiIsCiAgICAgICAgKSwKICAgICAgICBsb2NhbF9wYXRoPWYie3Bsb3RzX2Rlc3R9L2hpc3QuaHRtbCIsCiAgICApCgoKZGVmIF9jcmVhdGVfZmVhdHVyZXNfaGlzdG9ncmFtX2FydGlmYWN0cygKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgZGY6IHBkLkRhdGFGcmFtZSwKICAgIGV4dHJhX2RhdGE6IGRpY3QsCiAgICBsYWJlbF9jb2x1bW46IHN0ciwKICAgIHBsb3RzX2Rlc3Q6IHN0ciwKICAgIHByb2JsZW1fdHlwZTogc3RyLAopOgogICAgIiIiCiAgICBDcmVhdGUgYW5kIGxvZyBhIGhpc3RvZ3JhbSBhcnRpZmFjdCBmb3IgZWFjaCBmZWF0dXJlCiAgICAiIiIKCiAgICBmaWdzID0gZGljdCgpCiAgICBmaXJzdF9mZWF0dXJlX25hbWUgPSAiIgogICAgaWYgbGFiZWxfY29sdW1uIGlzIG5vdCBOb25lIGFuZCBwcm9ibGVtX3R5cGUgPT0gImNsYXNzaWZpY2F0aW9uIjoKICAgICAgICBhbGxfbGFiZWxzID0gZGZbbGFiZWxfY29sdW1uXS51bmlxdWUoKQogICAgdmlzaWJsZSA9IFRydWUKICAgIGZvciAoY29sdW1uTmFtZSwgXykgaW4gZGYuaXRlcml0ZW1zKCk6CiAgICAgICAgaWYgY29sdW1uTmFtZSA9PSBsYWJlbF9jb2x1bW46CiAgICAgICAgICAgIGNvbnRpbnVlCgogICAgICAgIGlmIGxhYmVsX2NvbHVtbiBpcyBub3QgTm9uZSBhbmQgcHJvYmxlbV90eXBlID09ICJjbGFzc2lmaWNhdGlvbiI6CiAgICAgICAgICAgIGZvciBsYWJlbCBpbiBhbGxfbGFiZWxzOgogICAgICAgICAgICAgICAgc3ViX2ZpZyA9IGdvLkhpc3RvZ3JhbSgKICAgICAgICAgICAgICAgICAgICBoaXN0ZnVuYz0iY291bnQiLAogICAgICAgICAgICAgICAgICAgIHg9ZGYubG9jW2RmW2xhYmVsX2NvbHVtbl0gPT0gbGFiZWxdW2NvbHVtbk5hbWVdLAogICAgICAgICAgICAgICAgICAgIG5hbWU9c3RyKGxhYmVsKSwKICAgICAgICAgICAgICAgICAgICB2aXNpYmxlPXZpc2libGUsCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBmaWdzW2Yie2NvbHVtbk5hbWV9QD9Ae2xhYmVsfSJdID0gc3ViX2ZpZwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHN1Yl9maWcgPSBnby5IaXN0b2dyYW0oaGlzdGZ1bmM9ImNvdW50IiwgeD1kZltjb2x1bW5OYW1lXSwgdmlzaWJsZT12aXNpYmxlKQogICAgICAgICAgICBmaWdzW2Yie2NvbHVtbk5hbWV9QD9AezF9Il0gPSBzdWJfZmlnCiAgICAgICAgaWYgdmlzaWJsZToKICAgICAgICAgICAgZmlyc3RfZmVhdHVyZV9uYW1lID0gY29sdW1uTmFtZQogICAgICAgIHZpc2libGUgPSBGYWxzZQoKICAgIGZpZyA9IGdvLkZpZ3VyZSgpCiAgICBmb3IgayBpbiBmaWdzLmtleXMoKToKICAgICAgICBmaWcuYWRkX3RyYWNlKGZpZ3Nba10pCgogICAgZmlnLnVwZGF0ZV9sYXlvdXQoCiAgICAgICAgdXBkYXRlbWVudXM9WwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiYnV0dG9ucyI6IFsKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICJsYWJlbCI6IGNvbHVtbl9uYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAibWV0aG9kIjogInVwZGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJhcmdzIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJ2aXNpYmxlIjogWwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkuc3BsaXQoIkA/QCIpWzBdID09IGNvbHVtbl9uYW1lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBrZXkgaW4gZmlncy5rZXlzKCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd4YXhpcyc6IHsncmFuZ2UnOiBbbnAubWluKGRmW2NvbHVtbl9uYW1lXSksIG5wLm1heChkZltjb2x1bW5fbmFtZV0pXX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7InRpdGxlIjogZiI8aT48Yj5IaXN0b2dyYW0gb2Yge2NvbHVtbl9uYW1lfTwvYj48L2k+In0sCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGZvciBjb2x1bW5fbmFtZSBpbiBkZi5jb2x1bW5zCiAgICAgICAgICAgICAgICAgICAgaWYgY29sdW1uX25hbWUgIT0gbGFiZWxfY29sdW1uCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgImRpcmVjdGlvbiI6ICJkb3duIiwKICAgICAgICAgICAgICAgICJwYWQiOiB7InIiOiAxMCwgInQiOiAxMH0sCiAgICAgICAgICAgICAgICAic2hvd2FjdGl2ZSI6IFRydWUsCiAgICAgICAgICAgICAgICAieCI6IDAuMjUsCiAgICAgICAgICAgICAgICAieGFuY2hvciI6ICJsZWZ0IiwKICAgICAgICAgICAgICAgICJ5IjogMS4xLAogICAgICAgICAgICAgICAgInlhbmNob3IiOiAidG9wIiwKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgYW5ub3RhdGlvbnM9WwogICAgICAgICAgICBkaWN0KAogICAgICAgICAgICAgICAgdGV4dD0iU2VsZWN0IEZlYXR1cmUgTmFtZSAiLAogICAgICAgICAgICAgICAgc2hvd2Fycm93PUZhbHNlLAogICAgICAgICAgICAgICAgeD0wLAogICAgICAgICAgICAgICAgeT0xLjA1LAogICAgICAgICAgICAgICAgeXJlZj0icGFwZXIiLAogICAgICAgICAgICAgICAgeHJlZj0icGFwZXIiLAogICAgICAgICAgICAgICAgYWxpZ249ImxlZnQiLAogICAgICAgICAgICAgICAgeGFuY2hvcj0ibGVmdCIsCiAgICAgICAgICAgICAgICB5YW5jaG9yPSJ0b3AiLAogICAgICAgICAgICAgICAgZm9udD17CiAgICAgICAgICAgICAgICAgICAgImNvbG9yIjogImJsdWUiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgKQogICAgICAgIF0sCiAgICApCgogICAgZmlnLnVwZGF0ZV9sYXlvdXQoCiAgICAgICAgd2lkdGg9NjAwLAogICAgICAgIGhlaWdodD00MDAsCiAgICAgICAgYXV0b3NpemU9RmFsc2UsCiAgICAgICAgbWFyZ2luPWRpY3QodD0xMDAsIGI9MCwgbD0wLCByPTApLAogICAgICAgIHRlbXBsYXRlPSJwbG90bHlfd2hpdGUiLAogICAgKQoKICAgIGZpZy51cGRhdGVfbGF5b3V0KHRpdGxlX3RleHQ9ZiI8aT48Yj5IaXN0b2dyYW1zIG9mIHtmaXJzdF9mZWF0dXJlX25hbWV9PC9iPjwvaT4iKQogICAgZXh0cmFfZGF0YVtmImhpc3RvZ3JhbXMiXSA9IGNvbnRleHQubG9nX2FydGlmYWN0KAogICAgICAgIFBsb3RseUFydGlmYWN0KGtleT1mImhpc3RvZ3JhbXMiLCBmaWd1cmU9ZmlnKSwKICAgICAgICBsb2NhbF9wYXRoPWYie3Bsb3RzX2Rlc3R9L2hpc3RvZ3JhbXMuaHRtbCIsCiAgICApCgoKZGVmIF9jcmVhdGVfZmVhdHVyZXNfMmRfc2NhdHRlcl9hcnRpZmFjdHMoCiAgICBjb250ZXh0OiBNTENsaWVudEN0eCwKICAgIGRmOiBwZC5EYXRhRnJhbWUsCiAgICBleHRyYV9kYXRhOiBkaWN0LAogICAgbGFiZWxfY29sdW1uOiBzdHIsCiAgICBwbG90c19kZXN0OiBzdHIsCiAgICBwcm9ibGVtX3R5cGU6IHN0ciwKKToKICAgICIiIgogICAgQ3JlYXRlIGFuZCBsb2cgYSBzY2F0dGVyLTJkIGFydGlmYWN0IGZvciBlYWNoIGNvdXBsZSBvZiBmZWF0dXJlcwogICAgIiIiCiAgICBmZWF0dXJlcyA9IFsKICAgICAgICBjb2x1bW5OYW1lIGZvciAoY29sdW1uTmFtZSwgXykgaW4gZGYuaXRlcml0ZW1zKCkgaWYgY29sdW1uTmFtZSAhPSBsYWJlbF9jb2x1bW4KICAgIF0KICAgIG1heF9mZWF0dXJlX2xlbiA9IGZsb2F0KG1heChsZW4oZWxlbSkgZm9yIGVsZW0gaW4gZmVhdHVyZXMpKQogICAgaWYgbGFiZWxfY29sdW1uIGlzIG5vdCBOb25lOgogICAgICAgIGxhYmVscyA9IHNvcnRlZChkZltsYWJlbF9jb2x1bW5dLnVuaXF1ZSgpKQogICAgZWxzZToKICAgICAgICBsYWJlbHMgPSBbTm9uZV0KICAgIGZpZyA9IGdvLkZpZ3VyZSgpCiAgICBpZiBsYWJlbF9jb2x1bW4gaXMgbm90IE5vbmUgYW5kIHByb2JsZW1fdHlwZSA9PSAiY2xhc3NpZmljYXRpb24iOgogICAgICAgIGZvciBsIGluIGxhYmVsczoKICAgICAgICAgICAgZmlnLmFkZF90cmFjZSgKICAgICAgICAgICAgICAgIGdvLlNjYXR0ZXIoCiAgICAgICAgICAgICAgICAgICAgeD1kZi5sb2NbZGZbbGFiZWxfY29sdW1uXSA9PSBsXVtmZWF0dXJlc1swXV0sCiAgICAgICAgICAgICAgICAgICAgeT1kZi5sb2NbZGZbbGFiZWxfY29sdW1uXSA9PSBsXVtmZWF0dXJlc1swXV0sCiAgICAgICAgICAgICAgICAgICAgbW9kZT0ibWFya2VycyIsCiAgICAgICAgICAgICAgICAgICAgdmlzaWJsZT1UcnVlLAogICAgICAgICAgICAgICAgICAgIHNob3dsZWdlbmQ9VHJ1ZSwKICAgICAgICAgICAgICAgICAgICBuYW1lPXN0cihsKSwKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgKQogICAgZWxpZiBsYWJlbF9jb2x1bW4gaXMgTm9uZToKICAgICAgICBmaWcuYWRkX3RyYWNlKAogICAgICAgICAgICBnby5TY2F0dGVyKAogICAgICAgICAgICAgICAgeD1kZltmZWF0dXJlc1swXV0sCiAgICAgICAgICAgICAgICB5PWRmW2ZlYXR1cmVzWzBdXSwKICAgICAgICAgICAgICAgIG1vZGU9Im1hcmtlcnMiLAogICAgICAgICAgICAgICAgdmlzaWJsZT1UcnVlLAogICAgICAgICAgICApCiAgICAgICAgKQogICAgZWxpZiBwcm9ibGVtX3R5cGUgPT0gInJlZ3Jlc3Npb24iOgogICAgICAgIGZpZy5hZGRfdHJhY2UoCiAgICAgICAgICAgIGdvLlNjYXR0ZXIoCiAgICAgICAgICAgICAgICB4PWRmW2ZlYXR1cmVzWzBdXSwKICAgICAgICAgICAgICAgIHk9ZGZbZmVhdHVyZXNbMF1dLAogICAgICAgICAgICAgICAgbW9kZT0ibWFya2VycyIsCiAgICAgICAgICAgICAgICBtYXJrZXI9ZGljdCgKICAgICAgICAgICAgICAgICAgICBjb2xvcj1kZltsYWJlbF9jb2x1bW5dLCBjb2xvcnNjYWxlPSJWaXJpZGlzIiwgc2hvd3NjYWxlPVRydWUKICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICB2aXNpYmxlPVRydWUsCiAgICAgICAgICAgICkKICAgICAgICApCgogICAgeF9idXR0b25zID0gW10KICAgIHlfYnV0dG9ucyA9IFtdCgogICAgZm9yIG5jb2wgaW4gZmVhdHVyZXM6CiAgICAgICAgaWYgcHJvYmxlbV90eXBlID09ICJjbGFzc2lmaWNhdGlvbiIgYW5kIGxhYmVsX2NvbHVtbiBpcyBub3QgTm9uZToKICAgICAgICAgICAgeF9idXR0b25zLmFwcGVuZCgKICAgICAgICAgICAgICAgIGRpY3QoCiAgICAgICAgICAgICAgICAgICAgbWV0aG9kPSJ1cGRhdGUiLAogICAgICAgICAgICAgICAgICAgIGxhYmVsPW5jb2wsCiAgICAgICAgICAgICAgICAgICAgYXJncz1bCiAgICAgICAgICAgICAgICAgICAgICAgIHsieCI6IFtkZi5sb2NbZGZbbGFiZWxfY29sdW1uXSA9PSBsXVtuY29sXSBmb3IgbCBpbiBsYWJlbHNdfSwKICAgICAgICAgICAgICAgICAgICAgICAgbnAuYXJhbmdlKGxlbihsYWJlbHMpKS50b2xpc3QoKSwKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICApCgogICAgICAgICAgICB5X2J1dHRvbnMuYXBwZW5kKAogICAgICAgICAgICAgICAgZGljdCgKICAgICAgICAgICAgICAgICAgICBtZXRob2Q9InVwZGF0ZSIsCiAgICAgICAgICAgICAgICAgICAgbGFiZWw9bmNvbCwKICAgICAgICAgICAgICAgICAgICBhcmdzPVsKICAgICAgICAgICAgICAgICAgICAgICAgeyJ5IjogW2RmLmxvY1tkZltsYWJlbF9jb2x1bW5dID09IGxdW25jb2xdIGZvciBsIGluIGxhYmVsc119LAogICAgICAgICAgICAgICAgICAgICAgICBucC5hcmFuZ2UobGVuKGxhYmVscykpLnRvbGlzdCgpLAogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICkKICAgICAgICBlbHNlOgogICAgICAgICAgICB4X2J1dHRvbnMuYXBwZW5kKAogICAgICAgICAgICAgICAgZGljdChtZXRob2Q9InVwZGF0ZSIsIGxhYmVsPW5jb2wsIGFyZ3M9W3sieCI6IFtkZltuY29sXV19XSkKICAgICAgICAgICAgKQoKICAgICAgICAgICAgeV9idXR0b25zLmFwcGVuZCgKICAgICAgICAgICAgICAgIGRpY3QobWV0aG9kPSJ1cGRhdGUiLCBsYWJlbD1uY29sLCBhcmdzPVt7InkiOiBbZGZbbmNvbF1dfV0pCiAgICAgICAgICAgICkKCiAgICAjIFBhc3MgYnV0dG9ucyB0byB0aGUgdXBkYXRlbWVudXMgYXJndW1lbnQKICAgIGZpZy51cGRhdGVfbGF5b3V0KAogICAgICAgIHVwZGF0ZW1lbnVzPVsKICAgICAgICAgICAgZGljdChidXR0b25zPXhfYnV0dG9ucywgZGlyZWN0aW9uPSJ1cCIsIHg9MC41LCB5PS0wLjEpLAogICAgICAgICAgICBkaWN0KGJ1dHRvbnM9eV9idXR0b25zLCBkaXJlY3Rpb249ImRvd24iLCB4PS1tYXhfZmVhdHVyZV9sZW4gLyAxMDAsIHk9MC41KSwKICAgICAgICBdCiAgICApCgogICAgZmlnLnVwZGF0ZV9sYXlvdXQoCiAgICAgICAgd2lkdGg9NjAwLAogICAgICAgIGhlaWdodD00MDAsCiAgICAgICAgYXV0b3NpemU9RmFsc2UsCiAgICAgICAgbWFyZ2luPWRpY3QodD0xMDAsIGI9MCwgbD0wLCByPTApLAogICAgICAgIHRlbXBsYXRlPSJwbG90bHlfd2hpdGUiLAogICAgKQoKICAgIGZpZy51cGRhdGVfbGF5b3V0KHRpdGxlX3RleHQ9ZiI8aT48Yj5TY2F0dGVyLTJkPC9iPjwvaT4iKQogICAgZXh0cmFfZGF0YVtmInNjYXR0ZXItMmQiXSA9IGNvbnRleHQubG9nX2FydGlmYWN0KAogICAgICAgIFBsb3RseUFydGlmYWN0KGtleT1mInNjYXR0ZXItMmQiLCBmaWd1cmU9ZmlnKSwKICAgICAgICBsb2NhbF9wYXRoPWYie3Bsb3RzX2Rlc3R9L3NjYXR0ZXItMmQuaHRtbCIsCiAgICApCgoKZGVmIF9jcmVhdGVfdmlvbGluX2FydGlmYWN0KAogICAgY29udGV4dDogTUxDbGllbnRDdHgsIGRmOiBwZC5EYXRhRnJhbWUsIGV4dHJhX2RhdGE6IGRpY3QsIHBsb3RzX2Rlc3Q6IHN0cgopOgogICAgIiIiCiAgICBDcmVhdGUgYW5kIGxvZyBhIHZpb2xpbiBhcnRpZmFjdAogICAgIiIiCiAgICBjb2xzID0gNQogICAgcm93cyA9IChkZi5zaGFwZVsxXSAvLyBjb2xzKSArIDEKICAgIGZpZyA9IG1ha2Vfc3VicGxvdHMocm93cz1yb3dzLCBjb2xzPWNvbHMpCgogICAgcGxvdF9udW0gPSAwCgogICAgZm9yIChjb2x1bW5OYW1lLCBjb2x1bW5EYXRhKSBpbiBkZi5pdGVyaXRlbXMoKToKICAgICAgICB2aW9saW4gPSBnby5WaW9saW4oCiAgICAgICAgICAgIHg9W2NvbHVtbk5hbWVdICogY29sdW1uRGF0YS5zaGFwZVswXSwKICAgICAgICAgICAgeT1jb2x1bW5EYXRhLAogICAgICAgICAgICBuYW1lPWNvbHVtbk5hbWUsCiAgICAgICAgKQoKICAgICAgICBmaWcuYWRkX3RyYWNlKAogICAgICAgICAgICB2aW9saW4sCiAgICAgICAgICAgIHJvdz0ocGxvdF9udW0gLy8gY29scykgKyAxLAogICAgICAgICAgICBjb2w9KHBsb3RfbnVtICUgY29scykgKyAxLAogICAgICAgICkKCiAgICAgICAgcGxvdF9udW0gKz0gMQoKICAgIGZpZ1sibGF5b3V0Il0udXBkYXRlKAogICAgICAgIGhlaWdodD0ocm93cyArIDEpICogMjAwLAogICAgICAgIHdpZHRoPShjb2xzICsgMSkgKiAyMDAsCiAgICAgICAgdGl0bGU9IjxpPjxiPlZpb2xpbiBQbG90czwvYj48L2k+IiwKICAgICkKCiAgICBmaWcudXBkYXRlX2xheW91dChzaG93bGVnZW5kPUZhbHNlKQogICAgZXh0cmFfZGF0YVsidmlvbGluIl0gPSBjb250ZXh0LmxvZ19hcnRpZmFjdCgKICAgICAgICBQbG90bHlBcnRpZmFjdChrZXk9InZpb2xpbiIsIGZpZ3VyZT1maWcpLAogICAgICAgIGxvY2FsX3BhdGg9ZiJ7cGxvdHNfZGVzdH0vdmlvbGluLmh0bWwiLAogICAgKQoKCmRlZiBfY3JlYXRlX2ltYmFsYW5jZV9hcnRpZmFjdCgKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgZGY6IHBkLkRhdGFGcmFtZSwKICAgIGV4dHJhX2RhdGE6IGRpY3QsCiAgICBsYWJlbF9jb2x1bW46IHN0ciwKICAgIHBsb3RzX2Rlc3Q6IHN0ciwKICAgIHByb2JsZW1fdHlwZTogc3RyLAopOgogICAgIiIiCiAgICBDcmVhdGUgYW5kIGxvZyBhbiBpbWJhbGFuY2UgY2xhc3MgYXJ0aWZhY3QgKGNzdiArIHBsb3QpCiAgICAiIiIKICAgIGlmIGxhYmVsX2NvbHVtbjoKICAgICAgICBpZiBwcm9ibGVtX3R5cGUgPT0gImNsYXNzaWZpY2F0aW9uIjoKICAgICAgICAgICAgbGFiZWxzX2NvdW50ID0gZGZbbGFiZWxfY29sdW1uXS52YWx1ZV9jb3VudHMoKS5zb3J0X2luZGV4KCkKICAgICAgICAgICAgZGZfbGFiZWxzX2NvdW50ID0gcGQuRGF0YUZyYW1lKGxhYmVsc19jb3VudCkKICAgICAgICAgICAgZGZfbGFiZWxzX2NvdW50LnJlbmFtZShjb2x1bW5zPXtsYWJlbF9jb2x1bW46ICJUb3RhbCJ9LCBpbnBsYWNlPVRydWUpCiAgICAgICAgICAgIGRmX2xhYmVsc19jb3VudFtsYWJlbF9jb2x1bW5dID0gbGFiZWxzX2NvdW50LmluZGV4CiAgICAgICAgICAgIGRmX2xhYmVsc19jb3VudFsid2VpZ2h0cyJdID0gZGZfbGFiZWxzX2NvdW50WyJUb3RhbCJdIC8gc3VtKAogICAgICAgICAgICAgICAgZGZfbGFiZWxzX2NvdW50WyJUb3RhbCJdCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGZpZyA9IHB4LnBpZShkZl9sYWJlbHNfY291bnQsIG5hbWVzPWxhYmVsX2NvbHVtbiwgdmFsdWVzPSJUb3RhbCIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZmlnID0gcHguaGlzdG9ncmFtKAogICAgICAgICAgICAgICAgaGlzdGZ1bmM9ImNvdW50IiwKICAgICAgICAgICAgICAgIHg9ZGZbbGFiZWxfY29sdW1uXSwKICAgICAgICAgICAgKQogICAgICAgICAgICBoaXN0ID0gbnAuaGlzdG9ncmFtKGRmW2xhYmVsX2NvbHVtbl0pCiAgICAgICAgICAgIGRmX2xhYmVsc19jb3VudCA9IHBkLkRhdGFGcmFtZSgKICAgICAgICAgICAgICAgIHsibWluX3ZhbCI6IGhpc3RbMV0sICJjb3VudCI6IGhpc3RbMF0udG9saXN0KCkgKyBbMF19CiAgICAgICAgICAgICkKICAgICAgICBmaWcudXBkYXRlX2xheW91dCh0aXRsZV90ZXh0PSI8aT48Yj5MYWJlbHMgSW1iYWxhbmNlPC9iPjwvaT4iKQogICAgICAgIGV4dHJhX2RhdGFbImltYmFsYW5jZSJdID0gY29udGV4dC5sb2dfYXJ0aWZhY3QoCiAgICAgICAgICAgIFBsb3RseUFydGlmYWN0KGtleT0iaW1iYWxhbmNlIiwgZmlndXJlPWZpZyksCiAgICAgICAgICAgIGxvY2FsX3BhdGg9ZiJ7cGxvdHNfZGVzdH0vaW1iYWxhbmNlLmh0bWwiLAogICAgICAgICkKICAgICAgICBleHRyYV9kYXRhWyJpbWJhbGFuY2UtY3N2Il0gPSBjb250ZXh0LmxvZ19hcnRpZmFjdCgKICAgICAgICAgICAgVGFibGVBcnRpZmFjdCgiaW1iYWxhbmNlLXdlaWdodHMtdmVjIiwgZGY9ZGZfbGFiZWxzX2NvdW50KSwKICAgICAgICAgICAgbG9jYWxfcGF0aD1mIntwbG90c19kZXN0fS9pbWJhbGFuY2Utd2VpZ2h0cy12ZWMuY3N2IiwKICAgICAgICApCgoKZGVmIF9jcmVhdGVfY29ycl9hcnRpZmFjdCgKICAgIGNvbnRleHQ6IE1MQ2xpZW50Q3R4LAogICAgZGY6IHBkLkRhdGFGcmFtZSwKICAgIGV4dHJhX2RhdGE6IGRpY3QsCiAgICBsYWJlbF9jb2x1bW46IHN0ciwKICAgIHBsb3RzX2Rlc3Q6IHN0ciwKKToKICAgICIiIgogICAgQ3JlYXRlIGFuZCBsb2cgYW4gY29ycmVsYXRpb24tbWF0cml4IGFydGlmYWN0IChjc3YgKyBwbG90KQogICAgIiIiCiAgICBpZiBsYWJlbF9jb2x1bW4gaXMgbm90IE5vbmU6CiAgICAgICAgZGYgPSBkZi5kcm9wKFtsYWJlbF9jb2x1bW5dLCBheGlzPTEpCiAgICB0Ymxjb3JyID0gZGYuY29ycigpCiAgICBleHRyYV9kYXRhWyJjb3JyZWxhdGlvbi1tYXRyaXgtY3N2Il0gPSBjb250ZXh0LmxvZ19hcnRpZmFjdCgKICAgICAgICBUYWJsZUFydGlmYWN0KCJjb3JyZWxhdGlvbi1tYXRyaXgtY3N2IiwgZGY9dGJsY29yciwgdmlzaWJsZT1UcnVlKSwKICAgICAgICBsb2NhbF9wYXRoPWYie3Bsb3RzX2Rlc3R9L2NvcnJlbGF0aW9uLW1hdHJpeC5jc3YiLAogICAgKQoKICAgIHogPSB0Ymxjb3JyLnZhbHVlcy50b2xpc3QoKQogICAgel90ZXh0ID0gW1siezouMmZ9Ii5mb3JtYXQoeSkgZm9yIHkgaW4geF0gZm9yIHggaW4gel0KICAgIGZpZyA9IGZmLmNyZWF0ZV9hbm5vdGF0ZWRfaGVhdG1hcCgKICAgICAgICB6LAogICAgICAgIHg9bGlzdCh0Ymxjb3JyLmNvbHVtbnMpLAogICAgICAgIHk9bGlzdCh0Ymxjb3JyLmNvbHVtbnMpLAogICAgICAgIGFubm90YXRpb25fdGV4dD16X3RleHQsCiAgICAgICAgY29sb3JzY2FsZT0iYWdzdW5zZXQiLAogICAgKQogICAgZmlnWyJsYXlvdXQiXVsieWF4aXMiXVsiYXV0b3JhbmdlIl0gPSAicmV2ZXJzZWQiICAjIGwgLT4gcgogICAgZmlnLnVwZGF0ZV9sYXlvdXQodGl0bGVfdGV4dD0iPGk+PGI+Q29ycmVsYXRpb24gbWF0cml4PC9iPjwvaT4iKQogICAgZmlnWyJkYXRhIl1bMF1bInNob3dzY2FsZSJdID0gVHJ1ZQoKICAgIGV4dHJhX2RhdGFbImNvcnJlbGF0aW9uIl0gPSBjb250ZXh0LmxvZ19hcnRpZmFjdCgKICAgICAgICBQbG90bHlBcnRpZmFjdChrZXk9ImNvcnJlbGF0aW9uIiwgZmlndXJlPWZpZyksCiAgICAgICAgbG9jYWxfcGF0aD1mIntwbG90c19kZXN0fS9jb3JyZWxhdGlvbi5odG1sIiwKICAgICkK
    commands: []
    code_origin: https://github.com/davesh0812/functions.git#fdb5bea494b9ac6709833f7dcaa792146bdd561d:/Users/davids/Projects/functions/describe/describe.py
    origin_filename: /Users/davids/Projects/functions/describe/describe.py
  entry_points:
    analyze:
      name: analyze
      doc: 'The function will output the following artifacts per

        column within the data frame (based on data types)

        If the data has more than 500,000 sample we

        sample randomly 500,000 samples:


        describe csv

        histograms

        scatter-2d

        violin chart

        correlation-matrix chart

        correlation-matrix csv

        imbalance pie chart

        imbalance-weights-vec csv'
      parameters:
      - name: context
        type: MLClientCtx
        doc: The function context
        default: ''
      - name: name
        type: str
        doc: Key of dataset to database ("dataset" for default)
        default: dataset
      - name: table
        type: Union[FeatureSet, DataItem]
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path) or FeatureSet
          as param
        default: null
      - name: label_column
        type: str
        doc: Ground truth column label
        default: null
      - name: plots_dest
        type: str
        doc: Destination folder of summary plots (relative to artifact_path) ("plots"
          for default)
        default: plots
      - name: random_state
        type: int
        doc: When the table has more than 500,000 samples, we sample randomly 500,000
          samples
        default: 1
      - name: problem_type
        type: str
        default: classification
      - name: dask_key
        type: str
        doc: Key of dataframe in dask client "datasets" attribute
        default: dask_key
      - name: dask_function
        type: str
        doc: Dask function url (db://..)
        default: null
      - name: dask_client
        doc: Dask client object
        default: null
      outputs:
      - default: ''
      lineno: 41
  description: describe and visualizes dataset stats
  default_handler: analyze
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
verbose: false
