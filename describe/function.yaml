kind: job
metadata:
  name: describe
  tag: ''
  hash: 39c9aaaca242fcb59943e86de8a49f5f220e5589
  project: ''
  labels:
    author: Davids
  categories:
  - data-analysis
spec:
  command: ''
  args: []
  image: mlrun/mlrun
  build:
    functionSourceCode: 
    commands: []
    code_origin: https://github.com/davesh0812/functions.git#3821b08dc12493132fd46b7f772f8a40734e7522:/Users/davids/Projects/functions/describe/describe.py
    origin_filename: /Users/davids/Projects/functions/describe/describe.py
  entry_points:
    analyze:
      name: analyze
      doc: 'The function will output the following artifacts per

        column within the data frame (based on data types):


        histogram matrix chart

        histogram per feature chart

        violin chart

        correlation-matrix chart

        correlation-matrix csv

        imbalance pie chart

        imbalance-weights-vec csv'
      parameters:
      - name: context
        type: MLClientCtx
        doc: the function context
        default: ''
      - name: name
        type: str
        doc: key of dataset to database ("dataset" for default)
        default: dataset
      - name: table
        type: DataItem
        doc: MLRun input pointing to pandas dataframe (csv/parquet file path)
        default: null
      - name: label_column
        type: str
        doc: ground truth column label
        default: null
      - name: plots_dest
        type: str
        doc: destination folder of summary plots (relative to artifact_path) ("plots"
          for default)
        default: plots
      - name: frac
        type: float
        doc: when the table has more than 5000 samples, the function will execute
          on random frac from the data (0.1 default)
        default: 0.1
      outputs:
      - default: ''
      lineno: 20
  description: describe and visualizes dataset stats
  default_handler: analyze
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  affinity: null
verbose: false
